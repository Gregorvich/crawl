#Utility
{{
-- Arena functions. Many, many functions, including ones that will spawn
-- enemies, run the countdown, declare which enemies to use for the rounds,
-- and the Triggerable Function definition itself.
function hero_mode_is_boss_round(round_id)
    return round_id % 5 == 0
end

function hero_mode_clean_up_arena()
    for p in iter.rect_iterator(dgn.point(1, 17), dgn.point(22, 38)) do
        local items = dgn.items_at(p.x, p.y)
        if #items ~= 0 then
            dgn.apply_area_cloud(p.x, p.y, 5, 10, 1, 1,
                                 "translocational energy", "other", 10)
            iter.stack_destroy(p)
        end
        local enemy = dgn.mons_at(p.x, p.y)
        if enemy then
            dgn.apply_area_cloud(p.x, p.y, 5, 10, 1, 1,
                                 "translocational energy", "other", 10)
            enemy.dismiss()
        end
    end
end

function hero_mode_deal_with_player_death(data)
    data.between_rounds = true
    data.round_id = data.active_round
    data.time_left = 100
    data.player_died = false
    hero_mode_clean_up_arena()
    data.finished = true
end

function hero_mode_spawn_enemies(data, difficulty)
    -- Find all of the slaves of the triggerable
    local sp = dgn.find_marker_positions_by_prop(data.spawn_dir, 1)
    -- Go through each of our slaves
    for _, pos in ipairs(sp) do
        if data.num_spawned >= data.round_enemies then
            break
        end
        -- Randomly decide whether a monster will spawn in this slave or not
        if crawl.one_chance_in(#sp) then
            if hero_mode_is_boss_round(data.round_id) and not data.boss_spawned then
                -- Monster set 2 is the one that contains bosses
                local enemy = dgn.create_monster(pos.x, pos.y, data.monster_set[2])
                if enemy == nil then
                    crawl.mpr("Couldn't find a boss!")
                else
                    enemy.set_prop("boss_mons", 1)
                    enemy.beh = mons.behaviour("wander")
                    data.num_spawned = data.num_spawned + 1
                    if not difficulty == "normal" then
                        hero_mode_setup_monster(enemy, difficulty)
                    end
                    data.boss_spawned = true
                    dgn.apply_area_cloud(pos.x, pos.y, 10, 10, 1, 1,
                                         "translocational energy", "other", -1)
                    crawl.dpr("Spawned " .. crawl.grammar(enemy.name, "a") .. " (" .. data.spawn_timer .. ").")
                end
            else
                local enemy = dgn.create_monster(pos.x, pos.y, data.monster_set[1])
                if enemy then
                    if enemy.experience > 0 then
                        -- Don't count the enemy if it is some kind of plant
                        enemy.set_prop("arena_slave", 1)
                        data.num_spawned = data.num_spawned + 1
                        if not difficulty == "normal" then
                            hero_mode_setup_monster(enemy, difficulty)
                        end
                    end
                    enemy.beh = mons.behaviour("wander")
                    dgn.apply_area_cloud(pos.x, pos.y, 10, 10, 1, 1,
                                         "translocational energy", "other", -1)
                    crawl.dpr("Spawned " .. crawl.grammar(enemy.name, "a") .. " (" ..data.spawn_timer .. ").")
                end
            end
        end
    end
end

-- If there are 50 waves, then there will 10 rounds. Also, there is no need to
-- save progress if the person completed the arena, since they will just start
-- on round 45 if he/she re-enters it.
function hero_mode_save_progress(data)
    if hero_mode_is_boss_round(data.round_id) or not data.round_id == 50 then
        current_round = math.floor(data.round_id / 5)

        if current_round > data.progression then
            data.progression = current_round
        end

    elseif data.round_id == 50 then
        crawl.mpr("Unable to save round data.")
    end
end

function hero_mode_end_round(data, reward_scale)
    -- Always say we are between rounds after finishing a round,
    -- that way the arena will start off like this if we finish
    -- a boss fight and come back later
    data.between_rounds = true
    local you_x, you_y = you.pos()

    -- Place award for killing boss
    if hero_mode_is_boss_round(data.round_id) then
        crawl.mpr("A rune of Zot has appeared.", "orb")
        -- Runes are placed in the third component of monster sets
        dgn.create_item(you_x, you_y, data.monster_set[3])

        data.finished = true
        hero_mode_save_progress(data)
        if not data.round_id == 50 then
            data.active_round = data.round_id + 1
            if scaling_enabled then
                local difficulty = hero_mode_retrieve_round_values(data)[1]
                local reward_scale = hero_mode_retrieve_round_values(data)[2]
                hero_mode_toggle_numbered_pressure_plates(difficulty, reward_scale)
            end
        end

        -- We get 10 turns to prepare when we eventually re-enter the
        -- arena
        data.time_left = 100

        -- Allow the person to leave after a boss round
        local entry_position = dgn.find_marker_positions_by_prop("entry_way", 1)[1]
        dgn.terrain_changed(entry_position.x, entry_position.y, "floor", false, false, false)
    else
        -- Give us 15 turns to rest before the next round
        data.time_left = 150
    end

    -- Scoring. Maybe add some interface for scoring so that players will feel more of an impact
    local style_gain = (1 + data.num_killed) * data.round_id
    local gold_gain = 10 * data.round_id

    if data.num_killed >= data.round_enemies then
        data.style_mult = data.style_mult + 1
        if hero_mode_is_boss_round(data.round_id) then
            crawl.mpr("<yellow>Victory achieved!</yellow>", "warning")
            crawl.mpr("<yellow>You have won a prize for killing the boss.</yellow>", "warning")
            -- Some extra score multiplier for killing the boss, since
            -- Score multipliers carry between sets of rounds
            data.style_mult = data.style_mult + 1
            -- Some more awards for killing the boss
        else
            crawl.mpr("<yellow>For killing all all enemies this round, you "
                      .. "have earned some extra style points!</yellow>", "warning")
        end
        crawl.mpr("Score multiplier: " .. data.style_mult .. "x", "intrinsic_gain")
        -- Gold multiplier is capped at 5x
        gold_gain = gold_gain * math.min(data.style_mult, 5)
    end

    if not reward_scale == 2 then
        gold_gain = hero_mode_setup_reward(reward_scale, gold_gain)
    end
    style_gain = style_gain * data.style_mult
    local style_points = dgn.persist.arena_style_points + style_gain
    dgn.persist.arena_style_points = style_points
    if style_points > 1 then
        crawl.mpr("You now have " .. style_points .. " arena points " ..
                  "(gained " .. style_gain .. ").", "intrinsic_gain")
    else
        crawl.mpr("You now have 1 arena point.", "intrinsic_gain")
    end
    crawl.take_note("Arena Points: " .. style_points ..
                    " (+" .. style_gain .. ") [x" .. data.style_mult .. "]",
                    "intrinsic_gain")
    dgn.create_item(you_x, you_y, "gold q:" .. gold_gain)

    -- Dismisses the remaining monsters, including your allies
    for p in iter.rect_iterator(dgn.point(1, 17), dgn.point(22, 38)) do
        local enemy = dgn.mons_at(p.x, p.y)
        if enemy then
            dgn.apply_area_cloud(p.x, p.y, 5, 10, 1, 1,
                                 "translocational energy", "other", 10)
            enemy.dismiss()
        end
    end
    
    -- For endgame stuff
    if data.round_id == 50 then
        crawl.mpr("<white>The crowd cheers loudly.</white>")
        crawl.mpr("<white>Congratulations! You are now the new Arena Champion!</white>")
        data.finished = true
    else
        data.round_id = data.round_id + 1
    end
end

function hero_mode_ominous_countdown(time_left, waiting)
    if not waiting then
        if time_left > 0 and (time_left == 500
                             or time_left == 200
                             or time_left == 150
                             or time_left == 100
                             or (time_left <= 50 and time_left % 10 == 0))
        then
            crawl.mpr(time_left / 10 .. "...", "duration")
        elseif time_left <= 0 then
            crawl.mpr("Time's up!", "duration")
            crawl.mpr("The arena falls silent.")
        end
    elseif time_left == 20 and waiting then
        crawl.mpr("<yellow>Get ready!</yellow>", "warning")
    end
end

-- Set the monster sets that can be used for rounds. Lots of monsters and
-- randomization.
function hero_mode_get_monster_set(round, boss)
    if not boss then
        local mon_set = {}
        
        if round == 1 and crawl.coinflip() then
            return {"place:D:2 / place:D:4 / w:4 sigmund / w:2 jessica / w:2 terence"}
        elseif round <= 2 then
            mon_set = {
                "place:D:3 / place:D:5 / w:4 sigmund / w:2 jessica / w:2 terence",
                "goblin / hobgoblin / kobold / big kobold / ijyb w:6 / pikel w:4",
                "rat / quokka / river rat / porcupine / w:2 hell rat / w:6 purgy",
                "ball python / adder w:15 / water moccasin w:5",
                "orc w:40 / orc wizard w:8 / orc priest w:5 / w:5 orc warrior / blork the orc",
                "gnoll w:35 / hound w:5 / gnoll sergeant / gnoll shaman / crazy yiuf",
                "lesser demon w:30 / grinder w:3 / w:2 eustachio",
                "zombie / skeleton / wight w:5 / necrophage / phantom w:5",
                "worker ant / soldier ant w:2 / queen ant w:1 / killer bee w:2",
                "ooze / w:5 jelly",
                "giant cockroach w:20 / scorpion / worm"
            }
        elseif round <= 5 then
            mon_set = {
                -- Branches: D, Orc, Elf, Lair, Shoals, Swamp, Spider, Snake, Slime,
                -- Hive, Crypt, Pan, Tomb
                "place:D:6 w:15 / place:D:10 w:15 / w:2 edmund / w:2 maurice /\
                    w:1 psyche / w:1 joseph",
                "w:30 place:Orc / orc wizard / orc warrior / w:3 orc knight /\
                    orc priest / orc high priest w:1 / blork the orc w:3 / urug w:1",
                "w:2 place:Elf / w:24 deep elf mage",
                "place:Lair / w:5 yak / w:5 crocodile / w:3 basilisk /\
                    w:1 death yak / river rat / hell rat / porcupine /\
                    w:2 dream sheep",
                "w:20 merfolk / w:5 merfolk siren / hippogriff w:15 / centaur /\
                    w:1 harpy / w:5 cyclops / w:1 snapping turtle",
                "w:5 bog body / w:5 tyrant leech / insubstantial wisp / w:5 swamp drake /\
                    bullfrog / w:2 spiny frog / w:2 hydra / w:2 vampire mosquito",
                "w:20 scorpion / w:14 jumping spider /\
                    w:5 tarantella / w:5 redback / w:1 wolf spider",
                "w:15 adder / ball python / water moccasin / naga / w:2 black mamba /\
                    w:1 naga mage / w:1 naga warrior",
                "jelly / w:5 ooze / floating eye / w:2 shining eye",
                "killer bee w:20 / w:5 queen bee",
                "zombie / skeleton / wight / necrophage /\
                    phantom w:5 / w:1 josephine",
                "w:7 ice devil / rust devil w:5 / orange demon / red devil w:5 /\
                    sixfirhy w:2 / hellwing",
                "w:20 mummy / w:5 guardian mummy / w:5 menkaure",
                -- Fire, Air, Earth, Water, Death
                "w:20 fire bat / fire elemental",
                "steam dragon / w:5 air elemental / w:1 wind drake / w:5 lightning spire /\
                    w:30 sky beast / insubstantial wisp",
                "w:20 earth elemental / gargoyle / w:15 rust devil /\
                     w:15 iron imp",
                "w:20 ice beast / w:20 simulacrum / rime drake / w:5 water elemental",
                "wight / wraith / w:15 spectral thing",
                -- Misc
                "kobold / big kobold / w:3 kobold demonologist / w:2 sonja",
                "jackal w:1 / hound w:5 / wolf w:20 / hell hound w:7 / w:3 grum",
                "ogre w:35 / two-headed ogre / ogre mage w:5 / w:2 erolcha",
                "bullfrog w:20 / blink frog w:6 / spiny frog w:6 / prince ribbit w:2",
                "gnoll / gnoll shaman / gnoll sergeant / hound / wolf",
                -- Gimmicks
                "neqoxec", "orc priest", "vampire bat",
                "kobold name:kamikaze_kobold n_rpl n_noc n_des perm_ench:inner_flame"
            }
        elseif round <= 10 then
            mon_set = {
                -- Branches: D, Orc, Elf, Lair, Shoals, Swamp, Spider, Snake, Slime,
                -- Hive, Crypt, Pan, Tomb
                "place:D:11 w:15 / place:D:14 w:15 / w:2 erica / w:2 harold /\
                    w:1 rupert",
                "w:20 place:Orc:$ / orc wizard / orc warrior / orc knight /\
                    orc priest / orc high priest w:3 / orc sorcerer w:2 /\
                    orc warlord w:1 / urug w:2",
                "place:Elf",
                "place:Lair:4 w:30 / rupert w:1",
                "place:Shoals",
                "place:Swamp",
                "place:Spider",
                "place:Snake",
                "jelly / floating eye / w:2 shining eye /\
                    w:2 golden eye / w:2 eye of draining / w:1 slime creature",
                "killer bee w:15 / w:5 queen bee / w:1 oklob plant",
                "w:3 skeletal warrior / wight / necrophage / zombie w:5 /\
                    skeleton w:5 / flayed ghost w:5 / phantom w:5 /\
                    shadow w:3 / silent spectre / w:4 josephine",
                "common demon",
                "mummy / w:5 guardian mummy / w:1 mummy priest",
                -- Fire, Air, Earth, Water, Death
                "fire bat / fire elemental /\
                    w:5 sun demon / w:2 efreet / hell hound",
                "steam dragon / air elemental / w:3 wind drake / lightning spire /\
                    w:20 sky beast / insubstantial wisp",
                "earth elemental w:20 / gargoyle / rust devil / iron imp /\
                     w:5 iron troll",
                "ice beast / rime drake / ogre simulacrum / water elemental",
                "wraith w:20 / w:5 eidolon / phantasmal warrior / w:2 nergalle",
                -- Misc
                "centaur w:20 / centaur warrior w:2 / nessos w:1",
                "ugly thing",
                "tyrant leech / worm",
                "ogre w:15 / two-headed ogre / ogre mage w:5 / w:1 erolcha",
                "troll / deep troll w:12 / iron troll w:2",
                "rime drake / swamp drake / steam dragon / swamp dragon /\
                 acid dragon / komodo dragon",
                "necrophage / w:2 ghoul / bog body",
                "shapeshifter hd:7",
                "polar bear",
                -- Gimmicks
                "neqoxec",
                "kobold name:kamikaze_kobold n_rpl n_noc n_des perm_ench:inner_flame",
                "dwarf name:drunken n_adj n_des n_noc perm_ench:confusion",
                "hungry ghost"
            }
        elseif round <= 15 then
            mon_set = {
                -- Branches: D, Orc, Elf, Lair, Shoals, Swamp, Spider, Snake, Slime,
                -- Hive, Crypt, Pan, Tomb
                "place:D:$ w:24 / w:1 louise / w:1 donald / w:1 kirke",
                "w:20 place:Orc:$ / orc wizard / orc sorcerer w:3 / orc warrior / orc knight /\
                    orc warlord w:3 / orc priest / orc high priest w:4 / urug w:3",
                "place:Elf:$",
                "place:Lair:$ w:100 / hydra / catoblepas / dire elephant / w:5 gastronok",
                "place:Shoals:$ w:20 / w:6 merfolk avatar / w:5 harpy",
                "place:Swamp:$ w:20 / w:6 hydra / w:5 swamp dragon",
                "place:Spider:$ w:20 / w:5 wolf spider / w:5 orb spider / w:2 emperor scorpion",
                "place:Snake:$ w:20 / w:5 naga mage / w:5 naga warrior / w:5 nagaraja",
                "place:Slime",
                "killer bee / queen bee / w:1 oklob plant",
                "place:Crypt / w:2 josephine",
                "common demon w:30 / kobold demonologist w:5 / frances w:3",
                "mummy / w:5 guardian mummy / w:2 mummy priest / w:1 sphinx",
                -- Fire, Air, Earth, Water, Death
                "w:5 fire bat / fire elemental /\
                    sun demon / efreet / hell hound /\
                    hell hog / w:5 fire crab",
                "w:1 storm dragon / air elemental / w:5 wind drake / w:17 sky beast /\
                    insubstantial wisp",
                "earth elemental w:30 / rust devil / w:5 iron troll /\
                    w:1 roxanne / w:2 iron dragon / w:3 iron elemental",
                "ice beast w:5 / rime drake w:5 / hydra simulacrum / stone giant simulacrum /\
                    golden dragon simulacrum / spriggan simulacrum / water elemental",
                "wraith / eidolon / phantasmal warrior / w:2 nergalle",
                -- Misc
                "centaur w:15 / centaur warrior w:5 / nessos w:1",
                "w:15 ugly thing / w:1 very ugly thing",
                "vampire mosquito / hornet",
                "ogre mage / w:5 deep elf mage / vampire mage / naga mage",
                "troll / deep troll / iron troll",
                "rime drake w:5 / swamp drake / swamp dragon /\
                    acid dragon w:5 / komodo dragon w:5 / lindwurm w:5 /\
                    fire dragon w:5 / ice dragon w:5 / storm dragon w:1",
                "necrophage / ghoul / bog body",
                "shapeshifter",
                -- Gimmicks
                "neqoxec",
                "moth of wrath / w:20 two-headed ogre", "ball lightning",
                "orb spider", "redback / sea snake w:3",
                "hungry ghost / w:5 harpy", "shining eye"
            }
        elseif round <= 20 then
            mon_set = {
                -- Branches: D, Orc, Elf, Shoals, Swamp, Spider, Snake, Slime,
                -- Blade, Forest, Crypt, Pan, Tomb, Hell
                "place:D:$ w:30 / w:1 nikola / w:1 frederick",
                "place:Orc:$ / orc sorcerer w:3 / orc knight / orc warlord w:3 /\
                    iron troll w:5 / stone giant w:5 / orc high priest w:4",
                "deep elf high priest / deep elf demonologist / deep elf annihilator /\
                    deep elf sorcerer / deep elf death mage / deep elf blademaster /\
                    deep elf master archer / place:Elf:$ w:200",
                "place:Shoals:$ w:30 / merfolk javelineer / merfolk impaler /\
                    merfolk aquamancer",
                "place:Swamp:$ / hydra / swamp dragon / w:5 green death",
                "place:Spider:$ / wolf spider / orb spider / w:5 emperor scorpion /\
                    w:5 ghost moth",
                "place:Snake:$ / naga mage / naga warrior / nagaraja /\
                    guardian serpent / anaconda",
                "place:Slime:$",
                "dancing weapon",
                "place:Forest",
                "place:Crypt:$",
                "common demon w:30 / greater demon w:5",
                "mummy / w:5 guardian mummy / w:2 mummy priest / w:5 sphinx",
                "place:Hell w:30 / geryon w:1",
                -- Fire, Air, Earth, Water, Death
                "fire elemental / fire dragon / sun demon / efreet / hell hound /\
                    hell hog / fire crab / fire giant / w:5 balrug / w:1 margery /\
                    w:2 azrael",
                "storm dragon / air elemental / w:5 wind drake / spriggan air mage /\
                    insubstantial wisp / w:3 titan / w:1 nikola",
                "earth elemental / w:5 iron golem / stone giant /\
                    rust devil / w:5 iron troll / w:1 iron giant /\
                    w:2 iron dragon / w:3 iron elemental / w:2 quicksilver dragon",
                "hydra simulacrum / stone giant simulacrum /\
                    golden dragon simulacrum / spriggan simulacrum / water elemental /\
                    ice devil / merfolk aquamancer / frost giant",
                "death cob / death yak / death drake w:5 / deep elf death mage /\
                    death knight / death ooze / green death",
                -- Misc
                "centaur / centaur warrior",
                "yaktaur w:15 / yaktaur captain w:5",
                "ugly thing w:14 / w:1 very ugly thing / w:1 wretched star",
                "ogre mage / w:5 deep elf mage / vampire mage / naga mage /\
                    lich / w:5 ancient lich / w:1 frederick",
                "cyclops / stone giant / w:5 frost giant / w:5 fire giant /\
                    w:1 titan",
                "fire dragon / ice dragon / storm dragon / w:5 shadow dragon /\
                    w:5 golden dragon / w:1 xtahua",
                "yak / dream sheep / death yak / apis / catoblepas",
                "glowing shapeshifter",
                "hell knight / w:5 necromancer / w:1 margery",
                "wraith / wight / phantasmal warrior / skeletal warrior /\
                    vampire / ghoul / mummy / flayed ghost / bone dragon / death cob /\
                    profane servitor",
                "vault guard / necromancer / hell knight / wizard /\
                    killer klown",
                "base draconian / w:1 nonbase draconian",
                "golden eye / shining eye / floating eye / eye of devastation /\
                    great orb of eyes / eye of draining / w:5 ophan",
                "vampire / vampire knight / vampire mage / w:1 jory",
                -- Gimmicks
                "neqoxec", "smoke demon", "catoblepas",
                "moth of wrath / w:20 stone giant", "ball lightning",
                "orb spider", "hungry ghost / harpy", "shining eye",
                "tormentor",
                "skeletal warrior / w:5 skeletal warrior ; blowgun . needle ego:confusion"
            }
        elseif round <= 26 then
            mon_set = {
                -- Branches: Vaults, Orc, Elf, Shoals, Swamp, Spider, Snake, Slime,
                -- Blade, Forest, Crypt, Pan, Tomb, Hell
                "vault guard w:50 / ancient lich w:5 / lich / yaktaur /\
                    yaktaur captain w:3 / stone giant / shadow dragon /\
                    titan w:5",
                "w:20 place:Orc:$ / orc sorcerer w:3 / orc knight / orc warlord w:5 /\
                    iron troll w:5 / stone giant w:5 / orc high priest w:4 /\
                    moth of wrath",
                "deep elf high priest / deep elf demonologist / deep elf annihilator /\
                    deep elf sorcerer / deep elf death mage / deep elf blademaster /\
                    deep elf master archer / place:Elf:$ w:70",
                "place:Shoals:$ / merfolk javelineer / merfolk impaler /\
                    merfolk aquamancer",
                "hydra / swamp dragon / green death / death drake",
                "place:Spider:$ w:5 / wolf spider / orb spider / emperor scorpion /\
                    ghost moth / moth of wrath",
                "place:Snake:$ w:5 / naga mage / naga warrior / w:20 nagaraja /\
                    guardian serpent / w:5 anaconda",
                "place:Slime:$ / acid blob / azure jelly / great orb of eyes",
                "dancing weapon",
                "place:Forest:$ w:20 / spriggan defender / spriggan rider /\
                    spriggan air mage / spriggan druid w:3 / spriggan berserker",
                "place:Crypt:$ w:25 / w:3 lich / w:5 vampire knight /\
                    w:2 boris / w:2 curse skull",
                "any demon w:30 / pandemonium lord",
                "place:Tomb:$ w:70 / sphinx w:20 / greater mummy",
                "place:Hell w:25 / geryon w:2 / nellie w:2",
                -- Elements/hells, Holy
                "place:Dis:$ w:20 / hell sentinel / iron dragon / quicksilver dragon /\
                    iron elemental / stone giant / iron giant",
                "w:5 orb of fire / brimstone fiend / balrug / hellion /\
                    fire giant / sun demon / fire vortex",
                "place:Coc:$ w:20 / ice fiend / blizzard demon / ice devil",
                "spriggan air mage / w:5 titan / w:5 electric golem / wind drake /\
                    air elemental / ball lightning / storm dragon",
                "tzitzimitl / reaper / shadow dragon / death drake /\
                    deep elf death mage / lich w:15 / ancient lich w:5 /\
                    death knight w:5 / place:Tar:$ w:40",
                "daeva / angel / cherub / pearl dragon / ophan / apis",
                -- Misc
                "centaur warrior",
                "yaktaur / yaktaur captain",
                "ugly thing",
                "lich / w:5 ancient lich / w:2 boris",
                "stone giant / frost giant / fire giant / titan / w:1 chuck",
                "fire dragon / ice dragon / storm dragon / shadow dragon /\
                    golden dragon / quicksilver dragon / iron dragon / w:1 xtahua",
                "glowing shapeshifter",
                "hell knight w:20 / w:1 margery",
                "vault guard / necromancer / hell knight / wizard /\
                    killer klown",
                "base draconian / w:5 nonbase draconian",
                "golden eye / shining eye / floating eye / eye of devastation /\
                    great orb of eyes / eye of draining / w:5 ophan",
                "vampire knight / vampire mage / w:1 jory",
                "hellion / hell sentinel / hell beast / hell hog / hell knight /\
                    hell hound / hellephant / hellwing / w:2 nellie",
                "profane servitor w:20 / angel / daeva / cherub / seraph w:5",
                -- Gimmicks
                "neqoxec", "smoke demon", "catoblepas",
                "moth of wrath / w:20 ettin", "orb spider", "fire crab",
                "shining eye", "tormentor", "tentacled monstrosity",
                "skeletal warrior / skeletal warrior ; blowgun . needle ego:confusion",
                "unseen horror / lorocyproca / shadow wraith / ghost moth",
                "curse toe / w:20 wandering mushroom / w:4 murray",
                "reaper / hell beast / geryon w:1",
                "ghost moth / w:30 lorocyproca / eye of draining",
                "floating eye w:5 / ettin",
                "executioner / w:1 ignacio",
                "ghost moth / moth of wrath / w:30 vampire mosquito"
            }
        elseif round <= 36 then
            mon_set = {
                -- Branches: Vaults, Orc, Elf, Shoals, Swamp, Spider, Snake, Slime,
                -- Blade, Forest, Crypt, Pan, Tomb, Hell
                "vault guard / ancient lich w:5 / lich / yaktaur /\
                    yaktaur captain w:3 / stone giant / shadow dragon /\
                    titan w:5 / golden dragon / glowing shapeshifter",
                "orc sorcerer / orc knight / orc warlord /\
                    iron troll w:5 / stone giant w:5 / orc high priest /\
                    moth of wrath",
                "deep elf high priest / deep elf demonologist / deep elf annihilator /\
                    deep elf sorcerer / deep elf death mage / deep elf blademaster /\
                    deep elf master archer / place:Elf:$ w:20",
                "place:Shoals:$ / merfolk javelineer / merfolk impaler /\
                    merfolk aquamancer",
                "green death / death drake",
                "place:Spider:$ w:5 / orb spider w:5 / emperor scorpion /\
                    ghost moth / moth of wrath",
                "place:Snake:$ w:2 / w:40 nagaraja / guardian serpent / w:5 anaconda",
                "place:Slime:$ / w:30 acid blob / azure jelly / floating eye /\
                    eye of draining",
                "dancing weapon ; bardiche",
                "spriggan defender / spriggan air mage / spriggan druid /\
                    spriggan berserker / spriggan rider",
                "lich / w:5 ancient lich / w:1 curse skull / w:5 curse toe",
                "any demon w:20 / pandemonium lord",
                "place:Tomb:$ w:30 / sphinx w:20 / greater mummy",
                "hellephant w:15 / w:1 nellie",
                -- Elements/hells, Holy
                "hell sentinel / iron dragon / quicksilver dragon /\
                    iron elemental / stone giant / cacodemon",
                "orb of fire / brimstone fiend / balrug / hellion /\
                    fire giant / sun demon",
                "place:Coc:$ w:20 / ice fiend / blizzard demon / ice devil /\
                    white draconian",
                "spriggan air mage / titan / electric golem / ball lightning /\
                    storm dragon",
                "tzitzimitl / reaper / shadow dragon / death drake /\
                    deep elf death mage / ancient lich /\
                    death knight w:5 / place:Tar:$ w:40",
                "daeva / angel / cherub / pearl dragon w:20 / ophan / apis",
                -- Misc
                "yaktaur captain",
                "lich / ancient lich",
                "stone giant / w:15 frost giant / w:15 fire giant / w:15 titan",
                "w:5 fire dragon / w:5 ice dragon / w:7 storm dragon / shadow dragon /\
                    golden dragon / quicksilver dragon / iron dragon",
                "glowing shapeshifter hd:20",
                "w:5 base draconian / nonbase draconian",
                "golden eye / shining eye / floating eye / eye of devastation /\
                    great orb of eyes / eye of draining / w:5 ophan",
                "w:20 hellion / hell sentinel / hell beast / hell hog / hell knight /\
                    hell hound / hellephant / hellwing / w:2 nellie",
                "profane servitor w:25 / angel / daeva / cherub / seraph",
                -- Gimmicks
                "neqoxec", "smoke demon", "catoblepas",
                "moth of wrath / w:20 ettin", "orb spider", "fire crab",
                "shining eye", "tormentor",
                "unseen horror / lorocyproca / shadow wraith / ghost moth",
                "reaper / hell beast / geryon w:1",
                "ghost moth / w:30 lorocyproca / eye of draining",
                "floating eye w:5 / tentacled monstrosity",
                "executioner / w:1 ignacio / w:5 death drake",
                "ghost moth / moth of wrath / vampire mosquito",
                -- Aaaarggghhhhh!
                "daeva / w:15 angel",
                "greater mummy / mummy priest / guardian mummy",
                "air elemental name:greater n_adj perm_ench:tornado col:lightcyan / air elemental w:20",
                "iron golem hd:20 col:magenta name:orb_golem n_rpl n_des n_spe spells:orb_of_destruction.70.natural",
                "brimstone fiend / ice fiend / tzitzimitl / executioner / hell sentinel",
                "titan / spriggan air mage / blizzard demon / w:20 sky beast",
                "sphinx / place:Tomb:$",
                "orb of fire / orb of fire name:orb_of_ice n_rpl n_des spells:glaciate.80.magical col:lightblue tile:mons_orb_of_ice /\
                  orb of fire name:orb_of_electricity n_rpl n_des spells:chain_lightning.80.magical col:yellow tile:mons_orb_of_electricity",
                "hellion / w:5 efreet"
            }
        else
            mon_set = {
                -- Branches: Vaults, Orc, Elf, Shoals, Swamp, Spider, Snake, Slime,
                -- Blade, Forest, Crypt, Pan, Tomb, Hell
                "vault guard / ancient lich w:15 / deep elf master archer w:3 /\
                    titan w:15 / golden dragon w:20 / glowing shapeshifter hd:20",
                "orc sorcerer / orc warlord w:20 / stone giant w:5 /\
                    orc high priest / moth of wrath",
                "deep elf high priest / deep elf demonologist / deep elf annihilator /\
                    deep elf sorcerer / deep elf blademaster w:20 /\
                    deep elf master archer w:20",
                "merfolk javelineer / merfolk impaler / merfolk aquamancer /\
                    blizzard demon / ice fiend",
                "green death / death drake w:15",
                "orb spider / emperor scorpion / ghost moth / moth of wrath",
                "w:40 nagaraja / guardian serpent / w:5 anaconda",
                "w:30 acid blob / azure jelly / floating eye / eye of draining",
                "dancing weapon ; bardiche ego:speed",
                "spriggan air mage",
                "w:15 ancient lich / w:6 curse toe",
                "greater demon / pandemonium lord",
                "sphinx w:20 / greater mummy",
                "hellephant w:15 / w:1 nellie",
                -- Elements/hells, Holy
                "hell sentinel / quicksilver dragon w:20 / iron elemental / cacodemon",
                "orb of fire w:20 / brimstone fiend / balrug / hellion w:20 /\
                    fire giant",
                "ice fiend / blizzard demon / ice devil /\
                    white draconian annihilator",
                "spriggan air mage / titan / electric golem w:20 /\
                    storm dragon",
                "tzitzimitl / reaper / shadow dragon / death drake /\
                    deep elf death mage / ancient lich /\
                    death knight w:5",
                "daeva w:20 / angel / cherub / pearl dragon w:20 / ophan / apis",
                -- Misc
                "deep elf master archer",
                "ancient lich",
                "w:5 stone giant / w:15 frost giant / w:15 fire giant / w:20 titan",
                "w:7 storm dragon / golden dragon w:15 /\
                    quicksilver dragon w:15 / iron dragon",
                "glowing shapeshifter hd:20",
                "nonbase draconian",
                "golden eye / shining eye / floating eye w:15 / eye of devastation /\
                    great orb of eyes / eye of draining / w:5 ophan",
                "w:30 hellion / hell sentinel / hell beast / hell hog / hell knight /\
                    hell hound / hellephant / w:2 nellie",
                "profane servitor w:25 / angel w:5 / daeva / cherub w:5 / seraph w:15",
                -- Gimmicks
                "neqoxec", "smoke demon", "catoblepas",
                "moth of wrath / w:20 ettin", "orb spider", "fire crab",
                "shining eye", "tormentor",
                "unseen horror / lorocyproca / shadow wraith / ghost moth",
                "reaper / hell beast / geryon w:1",
                "ghost moth / w:30 lorocyproca / eye of draining",
                "floating eye w:5 / tentacled monstrosity",
                "executioner / w:1 ignacio / w:5 death drake",
                -- Just die already!
                "daeva",
                "greater mummy / mummy priest",
                "air elemental name:greater n_adj perm_ench:tornado col:lightcyan",
                "iron golem hd:20 col:magenta name:orb_golem n_rpl n_des n_spe spells:orb_of_destruction.70.natural",
                "brimstone fiend / ice fiend / tzitzimitl w:5 / hell sentinel",
                "titan / spriggan air mage / blizzard demon",
                "sphinx",
                "orb of fire / orb of fire name:orb_of_ice n_rpl n_des spells:glaciate.80.magical col:lightblue tile:mons_orb_of_ice / " ..
                  "orb of fire name:orb_of_electricity n_rpl n_des spells:chain_lightning.80.magical col:yellow tile:mons_orb_of_electricity",
                "hellion"
            }
        end

        local picked = crawl.random2(#mon_set) + 1
        crawl.dpr("Picking monster set " .. picked .. " of " .. #mon_set .. ": " ..
                  mon_set[picked])
        return {mon_set[picked]}
    else
        local which_boss = math.floor(round / 5)
        return dgn.persist.boss_set[which_boss]
    end
end

function hero_mode_init_boss_table()
    local bs = {}
    if crawl.coinflip() then
        bs[1] = {"place:Snake", "aizul hd:7 hp:120 / " ..
                 "naga warrior name:naga_warlord n_rpl n_des n_noc col:cyan hp:130 / " ..
                 "anaconda name:giant n_adj n_noc hp:130 col:lightred",
                 "serpentine rune of zot"}
    else
        bs[1] = {"place:Swamp", "the lernaean hydra / " ..
                 "wizard name:witch n_rpl n_des n_noc col:green hp:130 " ..
                 "spells:mephitic_cloud.15.wizard;" ..
                          "summon_hydra.15.wizard;" ..
                          "invisibility.15.wizard;" ..
                          "teleport_self.15.wizard.emergency",
                 "decaying rune of zot"}
    end

    if crawl.coinflip() then
        bs[2] = {"place:Spider", "arachne hp:250 / " ..
                 "wolf spider name:dire n_adj n_noc col:blue hp:300 / " ..
                 "jumping spider name:phase_spider n_rpl n_des never_corpse " ..
                    "col:lightgreen spells:teleport_self.58.natural hp:300",
                 "gossamer rune of zot"}
    else
        bs[2] = {"place:Shoals", "polyphemus hp:350 / ilsuiw hp:250 / " ..
                 "merfolk avatar name:dimme tile:mons_dimme n_rpl n_des n_spe " ..
                    "col:lightmagenta hp:300 spells:avatar_song.160.natural;" ..
                                                   "malign_gateway.40.natural",
                 "barnacled rune of zot"}
    end

    if crawl.coinflip() then
        -- Elementalist boss is from mu_elemental_laboratory
        bs[3] = {"place:Elf w:300 / deep elf sorcerer / deep elf blademaster / " ..
                 "deep elf master archer / deep elf annihilator / deep elf high priest",
                 "fannar hp:400 hd:14 / " ..
                 "deep elf elementalist hp:400 " ..
                    "; robe ego:fire_resistance | " ..
                    "robe ego:cold_resistance | " ..
                    "robe ego:resistance . dagger ego:freezing | " ..
                    "dagger ego:flaming | dagger ego:electrocution",
                 "elven rune of zot"}
    else
        bs[3] = {"place:Forest:$ w:50 / spriggan druid w:2 / spriggan air mage w:5 / " ..
                 "spriggan berserker w:5", "agnes hp:335",
                 "mossy rune of zot"}
    end

    bs[4] = {"place:Slime", "dissolution hp:430 / " ..
             "acid blob name:sulfuric n_adj col:white hp:450 / " ..
             "great orb of eyes name:greater_orb_of_eyes n_rpl n_des n_noc col:green hp:600",
             "slimy rune of zot"}
    bs[5] = {"vault guard / place:Vaults", "mennas hp:250 / mara hp:300 / " ..
             "vault guard name:captain n_suf n_noc col:lightcyan hp:800 hd:26",
             "silver rune of zot"}
    if crawl.coinflip() then
        bs[5], bs[4] = bs[4], bs[5]
    end

    bs[6] = {"place:Dis:$", "dispater", "iron rune of zot"}
    bs[7] = {"place:Tar:$", "ereshkigal", "bone rune of zot"}
    bs[8] = {"place:Geh:$", "asmodeus", "obsidian rune of zot"}
    bs[9] = {"place:Coc:$", "antaeus", "icy rune of zot"}
    -- Pan sets are based on those in pan.des
    bs[10] = {"neqoxec / cacodemon / tormentor / tentacled monstrosity / " ..
              "floating eye / golden eye / eye of devastation / " ..
              "eye of draining / shining eye", "mnoleg", "glowing rune of zot"}
    bs[11] = {"smoke demon / blizzard demon / green death / rakshasa / " ..
              "glowing orange brain / titan / lich / draconian annihilator / " ..
              "deep elf annihilator", "lom lobon", "magical rune of zot"}
    bs[12] = {"efreet / sun demon / ynoxinul / balrug / brimstone fiend",
              "cerebov", "fiery rune of zot"}
    bs[13] = {"soul eater / lorocyproca / executioner / shadow wraith",
              "gloorx vloq", "dark rune of zot"}
    bs[14] = {"guardian mummy w:15 / mummy priest w:3 / greater mummy w:2",
               "khufu hp:500", "golden rune of zot"}
    return bs
end

function hero_mode_setup_monster(difficulty, monster)
    power = monster.hd
    health = monster.hp

    -- Scaling is done by reducing or increasing stats by a fourth.
    -- Monster spawn rates are also adjusted
    if difficulty == "easy" then
        power = math.floor(power * (3/4))
        if power < 1 then
            power = 1
        end
        health = math.floor(monster.hp * (3/4))
    elseif difficulty == "hard" then
        power = math.ceil(power * (5/4))
        health = math.ceil(health * (5/4))
    end

    monster.hd = power
    monster.hp = health

    return monster
end

function hero_mode_setup_reward(reward_scale, gold)
    if reward_scale == 1 then
        gold = math.floor(gold / 2)
    elseif reward_scale == 3 then
        gold = math.ceil(gold / 2)
    end
    return gold
end

-- Create a table consisting of difficulties that are each associated
-- with different rewards. The difficulties are in a random order, and
-- the rewards for each difficulty are also in a random order.
function hero_mode_initialize_order(data)
    difficulties = data.difficulties
    rewards = data.reward_values
    local randomized_difficulties = {}
    local number_of_difficulties = #difficulties

    -- Create a list of randomized difficulties
    for i=1, number_of_difficulties do
        picked = crawl.random2(#difficulties) + 1
        randomized_difficulties[i] = difficulties[picked]
        difficulties = hero_mode_remove_element(difficulties, i)
    end

    -- Create our table of combinations, where each difficulty will be
    -- associated with a certain number of rewards
    table_of_combinations = {}
    for i=1, #randomized_difficulties do
        -- For each randomized difficulty, create a list of randomized
        -- rewards that will be associated with it.
        local randomized_rewards = {}
        local number_of_rewards = #rewards
        for j=1, number_of_rewards do
            picked = crawl.random2(#rewards) + 1
            randomized_rewards[j] = rewards[picked]
            rewards = hero_mode_remove_element(rewards, j)
        end

        entry = {randomized_difficulties[i], randomized_rewards}
        table_of_combinations[i] = entry
    end

    data.difficulty_and_reward_table = table_of_combinations
end

function hero_mode_retrieve_round_values(data)
    local round_values = {}
    if data.round_id <= 5 then
        entry = data.difficulty_and_reward_table[1]
        difficulty = entry[1]
        reward = entry[2][1]
        round_values = {difficulty, reward}
    elseif data.round_id > 5 and data.round_id <=10 then
        entry = data.difficulty_and_reward_table[1]
        difficulty = entry[1]
        reward = entry[2][2]
        round_values = {difficulty, reward}
    elseif data.round_id > 10 and data.round_id <= 15 then
        entry = data.difficulty_and_reward_table[1]
        difficulty = entry[1]
        reward = entry[2][3]
        round_values = {difficulty, reward}
    elseif data.round_id > 15 and data.round_id <= 20 then
        entry = data.difficulty_and_reward_table[2]
        difficulty = entry[1]
        reward = entry[2][1]
        round_values = {difficulty, reward}
    elseif data.round_id > 20 and data.round_id <= 25 then
        entry = data.difficulty_and_reward_table[2]
        difficulty = entry[1]
        reward = entry[2][2]
        round_values = {difficulty, reward}
    elseif data.round_id > 25 and data.round_id <= 30 then
        entry = data.difficulty_and_reward_table[2]
        difficulty = entry[1]
        reward = entry[2][3]
        round_values = {difficulty, reward}
    elseif data.round_id > 30 and data.round_id <= 35 then
        entry = data.difficulty_and_reward_table[3]
        difficulty = entry[1]
        reward = entry[2][1]
        round_values = {difficulty, reward}
    elseif data.round_id > 35 and data.round_id <= 40 then
        entry = data.difficulty_and_reward_table[3]
        difficulty = entry[1]
        reward = entry[2][2]
        round_values = {difficulty, reward}
    else
        entry = data.difficulty_and_reward_table[3]
        difficulty = entry[1]
        reward = entry[2][3]
        round_values = {difficulty, reward}
    end

    return round_values
end

function hero_mode_toggle_numbered_pressure_plates(difficulty, reward_scale)
    local my_slaves = {}
    for i=1, 6 do
        my_slaves[i] = dgn.find_marker_positions_by_prop("number_panel", i)[1]
    end
    local index = 0
    for _, pos in ipairs(my_slaves) do
        index = index + 1
        if index == 1 or index == 4 then
            dgn.tile_floor_changed(pos.x, pos.y, "pressure_plate_number_1_inactive")
        elseif index == 2 or index == 5 then
            dgn.tile_floor_changed(pos.x, pos.y, "pressure_plate_number_2_inactive")
        elseif index == 3 or index == 6 then
            dgn.tile_floor_changed(pos.x, pos.y, "pressure_plate_number_3_inactive")
        end
    end

    if difficulty == "easy" then
        local position = my_slaves[1]
        dgn.tile_floor_changed(position.x, position.y, "pressure_plate_number_1_active")
    elseif difficulty == "normal" then
        local position = my_slaves[2]
        dgn.tile_floor_changed(position.x, position.y, "pressure_plate_number_2_active")
    elseif difficulty == "hard" then
        local position = my_slaves[3]
        dgn.tile_floor_changed(position.x, position.y, "pressure_plate_number_3_active")
    end

    if reward_scale == 1 then
        local position = my_slaves[4]
        dgn.tile_floor_changed(position.x, position.y, "pressure_plate_number_1_active")
    elseif reward_scale == 2 then
        local position = my_slaves[5]
        dgn.tile_floor_changed(position.x, position.y, "pressure_plate_number_2_active")
    elseif reward_scale == 3 then
        local position = my_slaves[6]
        dgn.tile_floor_changed(position.x, position.y, "pressure_plate_number_3_active")
    end
end

function hero_mode_disable_numbered_pressure_plates()
    local my_slaves = {}
    for i=1, 6 do
        my_slaves[i] = dgn.find_marker_positions_by_prop("number_panel", i)[1]
    end
    local index = 0
    for _, pos in ipairs(my_slaves) do
        index = index + 1
        if index == 1 or index == 4 then
            dgn.tile_floor_changed(pos.x, pos.y, "pressure_plate_number_1")
        elseif index == 2 or index == 5 then
            dgn.tile_floor_changed(pos.x, pos.y, "pressure_plate_number_2")
        elseif index == 3 or index == 6 then
            dgn.tile_floor_changed(pos.x, pos.y, "pressure_plate_number_3")
        end
    end
end

function hero_mode_remove_element(table, index)
    new_table = {}
    for i=1, (#table - 1) do
        if i < index then
            new_table[i] = table[i]
        elseif i > index then
            new_table[i] = table[i + 1]
        end
    end
    return new_table
end

function hero_mode_manage_arena(data, triggerable, triggerer, marker, ev)
    -- The arena marker will keep track of difficulties and rewards for two
    -- reasons. So we can change tiles accordingly, and because it kind of makes
    -- sense for the arena to manage this.
    if not data.table_initialized then
        hero_mode_initialize_order(data)
        data.table_initialized = true
    end

    if data.toggle_scaling and data.scaling_enabled then
        data.table_initialized = false
        data.scaling_enabled = false
        data.toggle_scaling = false
        hero_mode_disable_numbered_pressure_plates()
    elseif (data.toggle_scaling and not data.scaling_enabled)
            and data.table_initialized then
        data.scaling_enabled = true
        data.toggle_scaling = false
        local difficulty = hero_mode_retrieve_round_values(data)[1]
        local reward_scale = hero_mode_retrieve_round_values(data)[2]
        hero_mode_toggle_numbered_pressure_plates(difficulty, reward_scale)
    end

    if data.finished then
        return
    end

    -- Counts kills
    if triggerer.type == "monster_dies" and not data.between_rounds then
        local enemy = dgn.mons_from_mid(ev:arg1())
        if enemy.has_prop("arena_slave") then
            data.num_killed = data.num_killed + 1
        elseif enemy.has_prop("boss_mons") then
            data.num_killed = data.round_enemies
        end
        if data.num_killed >= data.round_enemies then
            -- You win the round
            if data.scaling_enabled then
                local reward_scale = hero_mode_retrieve_round_values(data)[2]
                hero_mode_end_round(data, reward_scale)
            else
                hero_mode_end_round(data, 2)
            end
        end
        return
    end

    -- Some miscellaneous functions relating to oddities such as pausing time
    -- Pause timer if you use step from time.
    if you.pos() == 0 then
        return
    end

    -- Pause if you've been banished to the Abyss, or are otherwise absent for
    -- more than 10 turns, somehow
    if ev:ticks() >= 100 then
        return
    end

    -- Manage rounds
    if triggerer.type == "turn" and triggerer.sub_type  == "countdown" then
        if data.between_rounds then
            data.time_left = data.time_left - 1
            hero_mode_ominous_countdown(data.time_left, data.between_rounds)

            if data.time_left <= 0 then
                crawl.take_note("Round " .. data.round_id .. ".")
                crawl.mpr("ROUND " .. data.round_id .. "!", "warning")
                if hero_mode_is_boss_round(data.round_id) then
                    crawl.mpr("BOSS ROUND!", "warning")
                else
                    crawl.mpr("FIGHT!", "warning")
                end

                data.time_left = 510 + crawl.random2(200)

                -- Randomize the number of enemies that will be in a round.
                -- Non-boss rounds will contain more enemies and the number
                -- for these rounds will be further randomized.
                data.round_enemies = 5 + crawl.div_rand_round(data.round_id, 3)
                if not hero_mode_is_boss_round(data.round_id) then
                    data.round_enemies = data.round_enemies + crawl.random2(crawl.div_rand_round(data.round_id, 3))
                end
                crawl.dpr("Number to spawn: " .. data.round_enemies .. ".")
                data.spawn_rate = math.ceil((1000 + crawl.random2(500)) / data.round_enemies)
                crawl.dpr("Spawn rate: " .. data.spawn_rate .. ".")
                data.spawn_timer = 0

                data.num_killed = 0
                data.num_spawned = 0
                data.boss_spawned = false
                data.monster_set = hero_mode_get_monster_set(data.round_id,
                                                   hero_mode_is_boss_round(data.round_id))

                -- 50% chance of picking a specific direction to spawn from, else
                -- spawn from all four directions
                if crawl.coinflip() then
                    local directions = {"north", "east", "south", "west"}
                    data.spawn_dir = directions[crawl.random2(#directions) + 1]
                    crawl.mpr("You sense tension in the " .. data.spawn_dir .. ".")
                else
                    data.spawn_dir = "spawn_point"
                end

                data.between_rounds = false
            end
        else
            if data.player_died then
                hero_mode_deal_with_player_death(data)
                return
            end

            if data.num_spawned >= data.round_enemies or data.spawn_timer > 3000 then
                -- Start countdown to end the round. Will start at just above 50
                -- turns. This will activate when all enemies have spawned or when
                -- 300 turns have passed. The latter shouldn't happen very often, but
                -- could if the portals get blocked.
                data.time_left = data.time_left - 1
                hero_mode_ominous_countdown(data.time_left, data.between_rounds)
            else
                data.spawn_timer = data.spawn_timer + 1
                -- If round takes more than 100 turns, speed things up a lot
                if data.spawn_timer > 1000 and data.spawn_rate > 1 then
                    data.spawn_rate = data.spawn_rate - 1
                    crawl.dpr("Speeding things up...")
                end
            end

            if data.spawn_timer % data.spawn_rate == 0 or data.num_spawned == 0 then
                if data.scaling_enabled then
                    local difficulty = hero_mode_retrieve_round_values(data)[1]
                    hero_mode_spawn_enemies(data, difficulty)
                else
                    -- Pass in the default value if scaling is not enabled
                    hero_mode_spawn_enemies(data, "normal")
                end
            end

            if data.time_left <= 0 then
                if data.scaling_enabled then
                    local reward_scale = hero_mode_retrieve_round_values[2]
                    hero_mode_end_round(data, reward_scale)
                else
                    hero_mode_end_round(data, 2)
                end
            end
        end
    end
end

-- Returns two values: the score, and false to indicate that we don't
-- want to add the default score.
function hero_mode_calculate_score(won)
    local points = dgn.persist.arena_style_points
    local runes = you.num_runes()

    if won and runes > 0 then
        points = points * runes
    end
    return points, false
end

function hero_mode_start_arena(data, triggerable, triggerer, marker, ev)
    if data.enabled then
        local entry_position = dgn.find_marker_positions_by_prop("entry_way", 1)[1]
        dgn.terrain_changed(entry_position.x, entry_position.y, "rock_wall", false, false, false)
        crawl.mpr("<blue>The arena gate slams shut behind you.</blue>")
        local marker_1 = data.marker
        marker_1.data.finished = false
        data.enabled = false
    end
end

function hero_mode_toggle_pressure_plate(data, triggerable, triggerer, marker, ev)
    if not data.arena_running then
        local pressure_plate_1_position = dgn.find_marker_positions_by_prop("pressure_plate", 1)[1]
        dgn.tile_floor_changed(pressure_plate_1_position.x, pressure_plate_1_position.y,
            "pressure_plate_pressed")

        local entry_position = dgn.find_marker_positions_by_prop("entry_way", 1)[1]
        dgn.terrain_changed(entry_position.x, entry_position.y, "floor", false, false, false)
        crawl.mpr("<blue>The arena gate slides open. Proceed into the arena if you " ..
                  "want to start the next round</blue>")

        local marker_1 = data.marker
        marker_1.data.enabled = true
        data.arena_running = true
    end
end

function hero_mode_disable_arena(data, triggerable, triggerer, marker, ev)
    marker_1 = data.marker
    arena_is_running = marker_1.data.arena_running
    if arena_is_running then
        hero_mode_clean_up_arena()
        local entry_position = dgn.find_marker_positions_by_prop("entry_way", 1)[1]
        local pressure_plate_1_position = dgn.find_marker_positions_by_prop("pressure_plate", 1)[1]

        dgn.terrain_changed(entry_position.x, entry_position.y, "rock_wall", false, false, false)
        dgn.tile_floor_changed(pressure_plate_1_position.x, pressure_plate_1_position.y,
            "pressure_plate_active")

        crawl.mpr("<blue>The arena gate closes. Come back later if you want to " ..
                  "start the next round.</blue>")

        marker_1 = data.marker
        marker_1.data.arena_running = false
    end
end

function hero_mode_manage_arena_death(data, triggerable, triggerer, marker, ev)
    marker_1 = data.marker_1
    arena_is_running = marker_1.data.arena_running
    if arena_is_running then
        local arena_marker = data.marker_2
        arena_marker.data.player_died = true

        local entry_position = dgn.find_marker_positions_by_prop("entry_way", 1)[1]
        local pressure_plate_1_position = dgn.find_marker_positions_by_prop("pressure_plate", 1)[1]

        dgn.terrain_changed(entry_position.x, entry_position.y, "rock_wall", false, false, false)
        dgn.tile_floor_changed(pressure_plate_1_position.x, pressure_plate_1_position.y, 
            "pressure_plate_active")

        crawl.mpr("<yellow>The arena closes. Re-enter it if you want to try again.</yellow>")

        data.arena_running = false
        marker_1 = data.marker_1
        marker_1.data.arena_running = false
    end
end

-- Tutorial functions. Some stuff is similar to the arena functions
-- because the tutorial uses monster spawning.
require("dlua/tutorial.lua")

tutorial6 = {}

function tutorial6.msg(text)
    return tutorial_msg("tutorial6 " .. text)
end

function hero_mode_armour_pickup(data, triggerable, triggerer, marker, ev)
    crawl.tutorial_msg("tutorial6 boots")
end

function hero_mode_boots_pickup(data, triggerable, triggerer, marker, ev)
    crawl.tutorial_msg("tutorial6 adventuring_1")
end

function hero_mode_raise_bridge(data, triggerable, triggerer, marker, ev)
    pressure_plate_3_position = dgn.find_marker_positions_by_prop("pressure_plate", 3)[1]
    dgn.tile_floor_changed(pressure_plate_3_position.x, pressure_plate_3_position.y,
        "pressure_plate_pressed")
    crawl.mpr("<yellow>You hear a click.</yellow>")

    local my_slaves = dgn.find_marker_positions_by_prop("submerged_bridge", 1)
    for _, pos in ipairs(my_slaves) do
        dgn.terrain_changed(pos.x, pos.y, "floor", false, false, false)
        if you.see_cell(pos.x, pos.y) then
            crawl.mpr("<blue>You hear a rush of water. A bridge rises from the "
                      .. "river!</blue>")
        else
            crawl.mpr("<blue>You hear a rush of water in the distance.</blue>")
        end
    end
    local rock_wall_position = dgn.find_marker_positions_by_prop("stone_wall", 1)[1]
    dgn.terrain_changed(rock_wall_position.x, rock_wall_position.y, "floor", false, false, false)
    if you.see_cell(rock_wall_position.x, rock_wall_position.y) then
        crawl.mpr("<green>A wall also slides away.</green>")
    else
        crawl.mpr("<green>You also hear a distant sliding sound.</green>")
    end
end

function hero_mode_melt_ice(data, triggerable, triggerer, marker, ev)
    pressure_plate_4_position = dgn.find_marker_positions_by_prop("pressure_plate", 4)[1]
    dgn.tile_floor_changed(pressure_plate_4_position.x, pressure_plate_4_position.y,
        "pressure_plate_pressed")
    crawl.mpr("<yellow>You hear a click.</yellow>")

    local ice_block_position = dgn.find_marker_positions_by_prop("ice_block", 1)[1]
    dgn.terrain_changed(ice_block_position.x, ice_block_position.y, "floor", false, false, false)
    if you.see_cell(ice_block_position.x, ice_block_position.y) then
        crawl.mpr("<lightblue>The ice block on the bridge melts.</lightblue>")
    else
        crawl.mpr("<lightblue>You hear a distant slushing sound.</lightblue>")
    end
end

function hero_mode_open_wall(data, triggerable, triggerer, marker, ev)
    pressure_plate_5_position = dgn.find_marker_positions_by_prop("pressure_plate", 5)[1]
    dgn.tile_floor_changed(pressure_plate_5_position.x, pressure_plate_5_position.y,
        "pressure_plate_pressed")
    crawl.mpr("<yellow>you hear a click</yellow>")

    local stone_wall_position = dgn.find_marker_positions_by_prop("stone_wall", 2)[1]
    dgn.terrain_changed(stone_wall_position.x, stone_wall_position.y, "floor", false, false, false)
    if you.see_cell(stone_wall_position.x, stone_wall_position.y) then
        crawl.mpr("<green>The rock wall slides away.</green>")
    else
        crawl.mpr("<green>You hear a distant sliding sound.</green>")
    end

    marker_1 = data.marker
    marker_1.data.active = true
end

function hero_mode_blow_up_wall(data, triggerable, triggerer, marker, ev)
    if data.already_pressed then
        return
    end

    if triggerer.type == "player_move" and not data.active then
        crawl.mpr("<yellow>You hear a click...</yellow>")
        crawl.more()
        crawl.mpr("<yellow>Nothing happens.</yellow>")
    elseif triggerer.type == "player_move" and data.active then
        local pressure_plate_6_position = dgn.find_marker_positions_by_prop("pressure_plate", 6)[1]
        dgn.tile_floor_changed(pressure_plate_6_position.x, pressure_plate_6_position.y,
            "pressure_plate_pressed")
        crawl.mpr("<yellow>You hear a click...</yellow>")

        local my_wall_slaves = dgn.find_marker_positions_by_prop("rock_wall", 1)
        local my_floor_slaves = dgn.find_marker_positions_by_prop("ground", 1)
        for _, pos in ipairs(my_wall_slaves) do
            dgn.terrain_changed(pos.x, pos.y, "floor", false, false, false)
        end
        for _, pos in ipairs(my_floor_slaves) do
            dgn.terrain_changed(pos.x, pos.y, "rock_wall", false, false, false)
        end

        crawl.mpr("<red>You hear a loud explosion!</red>")
        crawl.mpr("<red>Some of the wall to west of the cathedral has opened up.</red>")
        data.active = false
        data.already_pressed = true
    end
end

function hero_mode_manage_monsters(data, triggerable, triggerer, marker, ev)
    if (triggerer.type == "turn" and triggerer.sub_type == "countdown")
            and not data.monsters_initialized then
        local gxm, gym = dgn.max_bounds()
        local count = 1
        for p in iter.rect_iterator(dgn.point(1, 1), dgn.point(gxm - 2, gym - 2)) do
            local monster = dgn.mons_at(p.x, p.y)
            if monster then
                monster_information = {x = p.x, y = p.y, name = monster.db_name,
                    hp = monster.hp, hd = monster.hd, beh = monster.beh}
                data.monster_list[count] = monster_information
                count = count + 1
            end
        end
        data.monsters_initialized = true
    end

    if not data.respawn_monsters then
        return
    end

    if triggerer.type == "turn" and triggerer.sub_type == "countdown" then
        local gxm, gym = dgn.max_bounds()
        for p in iter.rect_iterator(dgn.point(1, 1), dgn.point(gxm - 2, gym - 2)) do
            local monster = dgn.mons_at(p.x, p.y)
            if monster then
                if not monster.unique then
                    monster.dismiss()
                end
            end
        end

        for p in iter.rect_iterator(dgn.point(1, 1), dgn.point(gxm - 2, gym - 2)) do
            for i=1, #data.monster_list do
                local monster_data = data.monster_list[i] 
                starting_position_x = monster_data["x"]
                starting_position_y = monster_data["y"]
                if starting_position_x == p.x and starting_position_y == p.y then
                    monster_name = monster_data["name"]
                    monster = dgn.create_monster(p.x, p.y, monster_name)
                    if monster then
                        monster.set_max_hp(monster_data["hp"])
                        monster.hd = monster_data["hd"]
                        monster.beh = monster_data["beh"]
                    end
                end
            end

            -- Restore the health of bosses if the player failed to kill one of them
            local monster = dgn.mons_at(p.x, p.y)
            if monster then
                if monster.unique then
                    for i=1, #data.monster_list do
                        local monster_data = data.monster_list[i]
                        if monster.db_name == monster_data["name"] then
                            monster.set_max_hp(monster_data["hp"])
                        end
                    end
                end
            end
        end

        -- Close all doors
        doors = dgn.find_marker_positions_by_prop("door", 1)
        for _, pos in ipairs(doors) do
            dgn.terrain_changed(pos.x, pos.y, "closed_door", false, false, false)
        end

        data.respawn_monsters = false
        crawl.mpr("<cyan>You sense that enemies have appeared nearby.</cyan>")
    end
end

function hero_mode_set_monster_respawning(data, triggerable, triggerer, marker, ev)
    marker_1 = data.marker
    marker_1.data.respawn_monsters = true
end

function hero_mode_set_monster_respawning_2(data, triggerable, triggerer, marker, ev)
    if triggerer.type == "player_move" then
        data.respawn_pending = true
    end

    if triggerer.type == "turn" and triggerer.sub_type == "countdown" then
        -- Check if the player has recently stepped on the respawn point, and if
        -- we are waiting to reset monsters.
        if not data.respawn_pending then
            return
        end

        -- Check if the arena has finished cleaning up yet.
        marker_2 = data.marker_2
        arena_running = not marker_2.data.finished
        if arena_running then
            return
        end

        marker_1 = data.marker_1
        marker_1.data.respawn_monsters = true
        data.respawn_pending = false
    end
end

function hero_mode_open_gate(data, triggerable, triggerer, marker, ev)
    pressure_plate_2_position = dgn.find_marker_positions_by_prop("pressure_plate", 2)[1]
    dgn.tile_floor_changed(pressure_plate_2_position.x, pressure_plate_2_position.y,
        "pressure_plate_pressed")
    crawl.mpr("<yellow>You hear a click.</yellow>")

    my_slaves = dgn.find_marker_positions_by_prop("gate_part", 1)
    for _, pos in ipairs(my_slaves) do
        dgn.terrain_changed(pos.x, pos.y, "floor", false, false, false)
    end
    crawl.mpr("<brown>The large gate creaks open.</brown>")
end

function hero_mode_enable_arena_scaling(data, triggerable, triggerer, marker, ev)
    if data.active then
        pressure_plate_7_position = dgn.find_marker_positions_by_prop("pressure_plate", 7)[1]
        dgn.tile_floor_changed(pressure_plate_7_position.x, pressure_plate_7_position.y,
            "pressure_plate_pressed")
        crawl.mpr("<yellow>You hear a click.</yellow>")
        crawl.mpr("<lightblue>Level scaling is now enabled in the arena</lightblue>")

        arena_marker = data.marker_1
        arena_marker.data.toggle_scaling = true
        data.active = false
    end
end

function hero_mode_disable_arena_scaling(data, triggerable, triggerer, marker, ev)
    if data.active then
        pressure_plate_8_position = dgn.find_marker_positions_by_prop("pressure_plate", 8)[1]
        dgn.tile_floor_changed(pressure_plate_8_position.x, pressure_plate_8_position.y,
            "pressure_plate_pressed")
        crawl.mpr("<yellow>You hear a click.</yellow>")
        crawl.mpr("<lightblue>Level scaling is now disabled in the arena</lightblue>")

        arena_marker = data.marker_1
        arena_marker.data.toggle_scaling = true
        data.active = false
    end
end

function hero_mode_manage_pressure_plates_1(data, triggerable, triggerer, marker, ev)
    if triggerer.type == "turn" or triggerer.sub_type == "countdown" then
        local arena_marker = data.marker_1
        local enable_arena_scaling_marker = data.marker_2
        local disable_arena_scaling_marker = data.marker_3

        -- Reactivate disabled markers
        if arena_marker.data.scaling_enabled and disable_arena_scaling_marker.data.active == false then
            disable_arena_scaling_marker.data.active = true
            pressure_plate_8_position = dgn.find_marker_positions_by_prop("pressure_plate", 8)[1]
            dgn.tile_floor_changed(pressure_plate_8_position.x, pressure_plate_8_position.y,
                "pressure_plate_active")
        elseif not arena_marker.data.scaling_enabled and enable_arena_scaling_marker.data.active == false then
            enable_arena_scaling_marker.data.active = true
            pressure_plate_7_position = dgn.find_marker_positions_by_prop("pressure_plate", 7)[1]
            dgn.tile_floor_changed(pressure_plate_7_position.x, pressure_plate_7_position.y,
                "pressure_plate_active")
        end
    end
end

-- Make this marker global so that markers in other maps can access its data
monster_management_marker = TriggerableFunction:new {
    func = "hero_mode_manage_monsters",
    data = {
        monster_list = {},
        monsters_initialized = false,
        respawn_monsters = false
    },
    repeated = true
}

monster_management_marker:add_triggerer(DgnTriggerer:new {
    type = "turn",
    delay = 1
})
}}


#Maps
NAME: Hero_Mode_Arena
TAGS: hero_mode no_item_gen no_trap_gen no_rotate no_hmirror no_vmirror
DESC: An Arena
ORIENT: encompass
SUBVAULT: a : arena_ring_2
SUBVAULT: g : grassy_area_2
SUBVAULT: m : training_area_2
SUBVAULT: c : rocky_path_2
SUBVAULT: e : entryway_2
SUBVAULT: s : oasis_2
SUBVAULT: f : cave_2
SUBVAULT: d : rocky_shore_2
SUBVAULT: h : frozen_lands_2
SUBVAULT: i : graveyard_2

MAP
                                               hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
                                               hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
                                               hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
                                               hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
                                fffffffffffffffhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
                                fffffffffffffffhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
                                fffffffffffffffhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
                                fffffffffffffffhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
                                fffffffffffffffhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
                                fffffffffffffffhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
                                fffffffffffffffhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
                                fffffffffffffffhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
                                fffffffffffffffhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
                                fffffffffffffffhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
                                fffffffffffffffhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
                                fffffffffffffffhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
aaaaaaaaaaaaaaaaaaaaaaxxxxxxxxxxfffffffffffffffffffmmmmmmmmmmmmmmmmmmmmmmmmmmm
aaaaaaaaaaaaaaaaaaaaaaxxxxxxxxxxxxxxxxxxfffffffffffmmmmmmmmmmmmmmmmmmmmmmmmmmm
aaaaaaaaaaaaaaaaaaaaaaxxxxxxxxxxxxxxxxxxfffffffffffmmmmmmmmmmmmmmmmmmmmmmmmmmm
aaaaaaaaaaaaaaaaaaaaaaxxxxxxxxxxxxxxxxxxfffffffffffmmmmmmmmmmmmmmmmmmmmmmmmmmm
aaaaaaaaaaaaaaaaaaaaaaxxxxxxxxxxxxxxxxxxfffffffffffmmmmmmmmmmmmmmmmmmmmmmmmmmm
aaaaaaaaaaaaaaaaaaaaaaxxxxxxxxxxxxxxxxxxfffffffffffmmmmmmmmmmmmmmmmmmmmmmmmmmm
aaaaaaaaaaaaaaaaaaaaaaxxxxxxxxxxxxxxxxxxfffffffffffmmmmmmmmmmmmmmmmmmmmmmmmmmm
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaxxxxxxfffffffffffmmmmmmmmmmmmmmmmmmmmmmmmmmm
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaxxxxxxsssssssssssmmmmmmmmmmmmmmmmmmmmmmmmmmm
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaxxxxxxsssssssssssmmmmmmmmmmmmmmmmmmmmmmmmmmm
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaxxxxxxsssssssssssmmmmmmmmmmmmmmmmmmmmmmmmmmm
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaxxxxxxsssssssssssmmmmmmmmmmmmmmmmmmmmmmmmmmm
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaxxxxxxsssssssssssmmmmmmmmmmmmmmmmmmmmmmmmmmm
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaxxxxxxsssssssssssmmmmmmmmmmmmmmmmmmmmmmmmmmm
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaxxxxxxsssssssssssmmmmmmmmmmmmmmmmmmmmmmmmmmm
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaxxxxxxsssssssssssmmmmmmmmmmmmmmmmmmmmmmmmmmm
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaxxxxxxsssssssssssmmmmmmmmmmmmmmmmmmmmmmmmmmm
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaxxxxxxsssssssssssmmmmmmmmmmmmmmmmmmmmmmmmmmm
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaxxxxxxsssssssssssmmmmmmmmmmmmmmmmmmmmmmmmmmm
aaaaaaaaaaaaaaaaaaaaaaeeeeeeeexxxxxxxxxxsssssssssssmmmmmmmmmmmmmmmmmmmmmmmmmmm
aaaaaaaaaaaaaaaaaaaaaaeeeeeeeexxxxxxxxxxsssssssssssmmmmmmmmmmmmmmmmmmmmmmmmmmm
aaaaaaaaaaaaaaaaaaaaaaeeeeeeeexxxxxxxxxxsssssssssssmmmmmmmmmmmmmmmmmmmmmmmmmmm
iiiiiiiiiiiiiiiiiiiiiieeeeeeeexxxxxxxxxxsssssssssssmmmmmmmmmmmmmmmmmmmmmmmmmmm
iiiiiiiiiiiiiiiiiiiiiieeeeeeeexxxxxxxxxxxxxxxxxxxxxmmmmmmmmmmmmmmmmmmmmmmmmmmm
iiiiiiiiiiiiiiiiiiiiiieeeeeeeexxxxxxxxxxxxxxxxxxxxxmmmmmmmmmmmmmmmmmmmmmmmmmmm
iiiiiiiiiiiiiiiiiiiiiieeeeeeeexxxxxxxxxxxxxxxxxxxxxmmmmmmmmmmmmmmmmmmmmmmmmmmm
iiiiiiiiiiiiiiiiiiiiiieeeeeeeexxxxxxxxxxxxxxxxxxxxxmmmmmmmmmmmmmmmmmmmmmmmmmmm
iiiiiiiiiiiiiiiiiiiiiieeeeeeeexxxxxxxxxxxxxxxxxxxxxmmmmmmmmmmmmmmmmmmmmmmmmmmm
iiiiiiiiiiiiiiiiiiiiiieeeeeeeexxxxxxxxxxxxxxxxxxxxxmmmmmmmmmmmmmmmmmmmmmmmmmmm
ggggggggggggggggggggggggggggggggxxxxxxxxxxxxxxxxxxxmmmmmmmmmmmmmmmmmmmmmmmmmmm
ggggggggggggggggggggggggggggggggcccccccccccccccccccmmmmmmmmmmmmmmmmmmmmmmmmmmm
ggggggggggggggggggggggggggggggggcccccccccccccccccccmmmmmmmmmmmmmmmmmmmmmmmmmmm
ggggggggggggggggggggggggggggggggcccccccccccccccccccmmmmmmmmmmmmmmmmmmmmmmmmmmm
ggggggggggggggggggggggggggggggggcccccccccccccccccccmmmmmmmmddddddddddddddddddd
ggggggggggggggggggggggggggggggggcccccccccccccccccccmmmmmmmmddddddddddddddddddd
ggggggggggggggggggggggggggggggggcccccccccccccccccccmmmmmmmmddddddddddddddddddd
ggggggggggggggggggggggggggggggggcccccccccccccccccccmmmmmmmmddddddddddddddddddd
ggggggggggggggggggggggggggggggggxxxxxxxxxxxxxxxxxxxmmmmmmmmddddddddddddddddddd
ggggggggggggggggggggggggggggggggdddddddddddddddddddddddddddddddddddddddddddddd
ggggggggggggggggggggggggggggggggdddddddddddddddddddddddddddddddddddddddddddddd
ggggggggggggggggggggggggggggggggdddddddddddddddddddddddddddddddddddddddddddddd
ggggggggggggggggggggggggggggggggdddddddddddddddddddddddddddddddddddddddddddddd
ggggggggggggggggggggggggggggggggdddddddddddddddddddddddddddddddddddddddddddddd
ggggggggggggggggggggggggggggggggdddddddddddddddddddddddddddddddddddddddddddddd
ggggggggggggggggggggggggggggggggdddddddddddddddddddddddddddddddddddddddddddddd
ggggggggggggggggggggggggggggggggdddddddddddddddddddddddddddddddddddddddddddddd
ggggggggggggggggggggggggggggggggdddddddddddddddddddddddddddddddddddddddddddddd
ggggggggggggggggggggggggggggggggdddddddddddddddddddddddddddddddddddddddddddddd
ggggggggggggggggggggggggggggggggdddddddddddddddddddddddddddddddddddddddddddddd
ggggggggggggggggggggggggggggggggdddddddddddddddddddddddddddddddddddddddddddddd
ggggggggggggggggggggggggggggggggdddddddddddddddddddddddddddddddddddddddddddddd
ggggggggggggggggggggggggggggggggdddddddddddddddddddddddddddddddddddddddddddddd
ggggggggggggggggggggggggggggggggdddddddddddddddddddddddddddddddddddddddddddddd
ggggggggggggggggggggggggggggggggdddddddddddddddddddddddddddddddddddddddddddddd
ENDMAP

NAME: Arena_Ring_2
TAGS: arena_ring_2 no_item_gen no_trap_gen no_rotate no_hmirror no_vmirror no_exits
KFEAT: a = m
FTILE: . = floor_sand
RTILE: x = wall_brick_brown
TILE: a = wall_brick_brown
{{
    local arena_marker = TriggerableFunction:new {
        func = "hero_mode_manage_arena",
        data = {
            num_killed = 0,
            num_spawned = 0,
            boss_spawned = false,
            round_id = 1,
            round_enemies = 0,      -- How many enemies will there be in the round?
            spawn_rate = 0,
            spawn_timer = 0,        -- Counter used for spawning enemies
            time_left = 60,         -- How much time is left
            between_rounds = true,  -- Are we waiting for the next round
            finished = true,        -- Have we killed the boss for the set of rounds?
            monster_set = {},
            style_mult = 1,
            spawn_dir = "",         -- Which spawn points will enemies come from?
            progression = 1,        -- A player's progression through the arena rounds
            active_round = 1,       -- The round the player will start at the next time he/she enters the arena
            player_died = false,    -- Keep track of whether the player died so that we can clean up the arena
            difficulty_and_reward_table = {}, -- The randomized combination of difficulties and rewards
                                              -- organized into a lua table
            table_initialized = false,
            difficulties = {"easy", "normal", "hard"},
            reward_values = {1, 2, 3},
            scaling_enabled = false,         -- whether we want to begin scaling difficulty and rewards
            toggle_scaling = false
        },
        repeated = true
    }

    arena_marker:add_triggerer(DgnTriggerer:new {
        type = "monster_dies",
        -- Monsters in the arena are tagged as either "arena_slave"
        -- or "boss_mons", and therefore we can set the target as
        -- "any".
        target = "any"
    })

    arena_marker:add_triggerer(DgnTriggerer:new {
        type = "turn",
        delay = 1
    })

    -- This marker is in charge of starting the arena when the
    -- player steps on a specific space.
    local pressure_plate_2_marker = TriggerableFunction:new {
        func = "hero_mode_start_arena",
        data = {
            enabled = false,
            marker = arena_marker
        },
        repeated = true
    }

    pressure_plate_2_marker:add_triggerer(DgnTriggerer:new {
        type = "player_move"
    })

    -- This marker is in charge of enabling the second marker. This is
    -- necessary since the second marker will disable itself when the
    -- player enters the arena, and so will need something to re-enable
    -- it.
    local pressure_plate_1_marker = TriggerableFunction:new {
        func = "hero_mode_toggle_pressure_plate",
        data = {
            arena_running = false,
            marker = pressure_plate_2_marker
        },
        repeated = true
    }

    pressure_plate_1_marker:add_triggerer(DgnTriggerer:new {
        type = "player_move"
    })

    -- This marker is in charge of disabling the arena if the player changes
    -- his/her mind and decides to leave, or if he/she just finished a round
    -- and is now leaving.
    local pressure_plate_3_marker = TriggerableFunction:new {
        func = "hero_mode_disable_arena",
        data = {
            arena_running = false,
            marker = pressure_plate_1_marker
        },
        repeated = true
    }

    pressure_plate_3_marker:add_triggerer(DgnTriggerer:new {
        type = "player_move"
    })

    local manage_arena_death_marker = TriggerableFunction:new {
        func = "hero_mode_manage_arena_death",
        data = {
            arena_running = false,
            marker_1 = pressure_plate_1_marker,
            marker_2 = arena_marker
        },
        repeated = true
    }

    manage_arena_death_marker:add_triggerer(DgnTriggerer:new {
        type = "player_move"
    })

    -- This marker will have to keep track of whether the arena has finished
    -- cleaning up before allowing all monsters to respawn.
    local set_monster_respawning_marker_1 = TriggerableFunction:new {
        func = "hero_mode_set_monster_respawning_2",
        data = {
            marker_1 = monster_management_marker,
            marker_2 = arena_marker,
            respawn_pending = false
        },
        repeated = true
    }

    set_monster_respawning_marker_1:add_triggerer(DgnTriggerer:new {
        type = "player_move"
    })

    set_monster_respawning_marker_1:add_triggerer(DgnTriggerer:new {
        type = "turn",
        delay = 1
    })

    local enable_arena_scaling_marker = TriggerableFunction:new {
        func = "hero_mode_enable_arena_scaling",
        data = {
            marker_1 = arena_marker,
            active = true
        },
        repeated = true
    }

    enable_arena_scaling_marker:add_triggerer(DgnTriggerer:new {
        type = "player_move"
    })

    local disable_arena_scaling_marker = TriggerableFunction:new {
        func = "hero_mode_disable_arena_scaling",
        data = {
            marker_1 = arena_marker,
            active = false
        },
        repeated = true
    }

    disable_arena_scaling_marker:add_triggerer(DgnTriggerer:new {
        type = "player_move"
    })

    local manage_pressure_plates_1_marker = TriggerableFunction:new {
        func = "hero_mode_manage_pressure_plates_1",
        data = {
            marker_1 = arena_marker,
            marker_2 = enable_arena_scaling_marker,
            marker_3 = disable_arena_scaling_marker
        },
        repeated = true
    }

    manage_pressure_plates_1_marker:add_triggerer(DgnTriggerer:new {
        type = "turn",
        delay = 1
    })

    dgn.persist.boss_set = hero_mode_init_boss_table()

    -- Store this in dgn.persist rather than arena_marker.data because
    -- this allows the function "hero_mode_calculate_score" to access it
    dgn.persist.arena_style_points = 0
    dgn.persist.calc_score = global_function("hero_mode_calculate_score");

    lua_marker("A", arena_marker)
    lua_marker("A", portal_desc {arena = 1})
    lua_marker("J", portal_desc {entry_way = 1})
    lua_marker("B", portal_desc {spawn_point = 1, north = 1})
    lua_marker("C", portal_desc {spawn_point = 1, east = 1})
    lua_marker("D", portal_desc {spawn_point = 1, south = 1})
    lua_marker("E", portal_desc {spawn_point = 1, west = 1})
    lua_marker("F", portal_desc {spawn_point = 1, north = 1, west = 1})
    lua_marker("G", portal_desc {spawn_point = 1, north = 1, east = 1})
    lua_marker("H", portal_desc {spawn_point = 1, south = 1, west = 1})
    lua_marker("I", portal_desc {spawn_point = 1, south = 1, east = 1})

    lua_marker("Y", pressure_plate_1_marker)
    lua_marker("Y", portal_desc {pressure_plate = 1})
    lua_marker("Z", pressure_plate_2_marker)
    lua_marker("W", pressure_plate_3_marker)
    lua_marker("W", portal_desc {pressure_plate = 3})
    lua_marker("o", manage_arena_death_marker)
    lua_marker("o", portal_desc {arena_death = 1})
    lua_marker("o", set_monster_respawning_marker_1)
    lua_marker("1", portal_desc {number_panel = 1})
    lua_marker("2", portal_desc {number_panel = 2})
    lua_marker("3", portal_desc {number_panel = 3})
    lua_marker("4", portal_desc {number_panel = 4})
    lua_marker("5", portal_desc {number_panel = 5})
    lua_marker("6", portal_desc {number_panel = 6})
    lua_marker("r", enable_arena_scaling_marker)
    lua_marker("r", portal_desc {pressure_plate = 7})
    lua_marker("y", disable_arena_scaling_marker)
    lua_marker("y", portal_desc {pressure_plate = 8})
    lua_marker("u", manage_pressure_plates_1_marker)
}}
KFEAT: BCDEFGHI = dry_fountain
KFEAT: A = rock_wall
KFEAT: ,YZ = floor
KFEAT: J = rock_wall
TILE: BCDEFGHI = floor_rough_magenta
TILE: Z = floor_sand
FTILE: Y = pressure_plate_active
TILE: J = dngn_grate
TILE: cA = wall_sandstone
KFEAT: deghi = civilian
KFEAT: k = furniture
TILE: d = female_red_head
TILE: e = female_blonde
TILE: g = male_kilt
TILE: h = golden_knight
TILE: i = silver_knight
TILE: k = sand_wall_wood
KFEAT: sfl = .
FTILE: s = sand_bench
FTILE: f = sand_bench_floor
FTILE: l = sand_bench_stairs
FTILE: deghijk = sand_bench
KPROP: ZJY.sfl = no_tele_into
KFEAT: bpqKLMNOPQRSTW123456ruy = .
KFEAT: m = x
FTILE: b = floor_cobble_blood
RTILE: m = wall_catacombs
KPROP: b = no_tele_into
KFEAT: o = ominous_space
TILE: o = spooky_grass_spawn_point_blue
FTILE: p = spooky_grass_edge_east_blue
FTILE: q = spooky_grass_edge_west_blue
FTILE: K = spooky_grass_edge_south_blue
FTILE: L = spooky_grass_edge_north_blue
FTILE: M = spooky_grass_edge_se_blue
FTILE: N = spooky_grass_edge_sw_blue
FTILE: O = spooky_grass_edge_nw_blue
FTILE: P = spooky_grass_edge_ne_blue
FTILE: Q = graveyard_grass
FTILE: R = spooky_grass_energy_blue
FTILE: S = spooky_grass_energy_2_blue
FTILE: T = spooky_grass_blue
FTILE: t = graveyard_grass
FTILE: W = floor_cobble_blood
FTILE: 14 = pressure_plate_number_1
FTILE: 25 = pressure_plate_number_2
FTILE: 36 = pressure_plate_number_3
FTILE: r = pressure_plate_active
FTILE: y = pressure_plate_pressed
FTILE: u = floor_cobble_blood
KITEM: v = potion of heal wounds q:10
FTILE: v = floor_cobble_blood

MAP
xxxxxxxxxxxxxxxxxxxxxx
xfsdsssfsgssisfsssissx
xlkkkkklkkkkkklkkkkklx
xfsgsesfsdssisfsshssfx
xlkkkkklkkkkkklkkkkklx
xfsssssfsgssssfsisesfx
xlkkkkaaaaaaaaaakkkklx
xsdaaaa..BBBB..aaaassxmmmmmmmmmmmm
xaaaF............Gaaaxmbb123bbbbum
x..................xxxmbb456brybbm
x..................xxxmbbbbbbbbbbm
x.................ZJYbWbbbbbbvbbbm
xE.................xxxmbbbbbbbbbbm
xE........cA........Cxmbbbbbbbbbbm
xE........cc........Cxmbbbbbbbbbbm
xE..................Cxmbobbbbbbbbm
x...................Cxmbbbbbbbbbbm
x....................xmbbbbbbbbbbm
x....................xmmmbbmmmmmmm
xaaaH............Iaaax
xaaaaaa..DDDD..aaaaaax
xxxxxxxxxxxxxxxxxxxxxx
ENDMAP

NAME: Entryway_2
TAGS: entryway_2 no_item_gen no_trap_gen no_rotate no_hmirror no_vmirror
KFEAT: r = .
FTILE: . = floor_hall
FTILE: r = floor_rough_blue
RTILE: x = wall_brick_gray
: lua_marker("+", portal_desc {door = 1})

MAP
xxx++xxx
x..rr..x
x..rr..x
x..rr..x
x..rr..x
x..rr..x
x..rr..x
x..rr..x
x..rr..x
xxx++xxx
ENDMAP

NAME: Grassy_Area_2
TAGS: grassy_area_2 no_item_gen no_trap_gen no_rotate no_hmirror no_vmirror no_pool_fixup no_monster_gen
KFEAT: r = x
FTILE: .t = floor_grass
RTILE: r = wall_orc
KFEAT: fghjklmopqsDEF = furniture
KFEAT: AI = civilian
KFEAT: niuvGHKL = .
FTILE: n = floor_dirt
FTILE: i = floor_vines
TILE: A = arena_guard
TILE: f = barrel_1
TILE: g = barrel_2
TILE: j = fruit_green_1
TILE: k = fruit_brown_1
TILE: l = fruit_red_2
TILE: m = fruit_green_2
TILE: s = fruit_red_1
TILE: o = fruit_bottom
TILE: p = fruit_bottom
TILE: q = bucket_2
FTILE: o = floor_vines
FTILE: fgjklmpqs = floor_grass
FTILE: A = floor_grass
FTILE: u = cobblestone_path
FTILE: T = floor_vines
FTILE: v = graveyard_grass
TILE: D = graveyard_grass_log_middle
TILE: E = graveyard_grass_log_edge_right
TILE: F = graveyard_grass_log_edge_left
FTILE: G = floor_sand
FTILE: H = ship_tile_62
TILE: I = hero_f
FTILE: I = floor_vines
SUBVAULT: a : arena_shop_1
SUBVAULT: b : arena_shop_2
SUBVAULT: c : arena_shop_3
SUBVAULT: d : arena_shop_4
SUBVAULT: e : arena_inn
SUBVAULT: C : arena_shop_5
KFEAT: J = tree
FTILE: J = floor_grass
: lua_marker("J", monster_management_marker)
FTILE: K = graveyard_grass_flowers
FTILE: L = graveyard_grass_flowers_2

MAP
ttwwwwtttttttttttttuttttt..ttttt
tvGwwWWvFDDEvKvKKvvuvv.........r
tvGwwWvKvLvvKvvvLvvvv...Ann....r
tvGwvaaaaaaaavbbbbbbbbb..nn.....
t.Gwvaaaaaaaavbbbbbbbbb..nnnnn..
t.Gwvaaaaaaaavbbbbbbbbb..n......
tGww.aaaaaaaa.bbbbbbbbb..n.....r
twww.aaaaaaaa.bbbbbbbbbnnn.....r
twww.aaaaaaaa.......nnnndddddd.r
twwwwaaaaaaaa.tjkl.nn...dddddd.r
ttwwWt.t.......oooiims..dddddd.r
tnHHHnnnnnnnnniiiiiiop..dddddd.r
ttwwW......t..iiiTiii...dddddd.t
t.wWeeeeeeeee.iIiiiii...dddddd.t
t.wWeeeeeeeee..iiiiinnn........t
twwWeeeeeeeeeff.......nnn.tt...t
twW.eeeeeeeeegg.ccccccc.nCCCCCCt
twW.eeeeeeeeef..ccccccc.nCCCCCCt
tWW.eeeeeeeeegt.ccccccc.nCCCCCCt
t...eeeeeeeeeq..ccccccc.nCCCCCCt
t...eeeeeeeee...ccccccctnCCCCCCt
tJ..eeeeeeeee...ccccccc.nCCCCCCt
t...eeeeeeeee...tt...t..nCCCCCCt
t...................t...tCCCCCCt
tttttttttttttttttttttttttttttttt
ENDMAP

NAME: Arena_Shop_1
TAGS: arena_shop_1 no_item_gen no_trap_gen no_rotate no_hmirror no_vmirror
FTILE: . = village_tile_1
RTILE: x = wall_brick_yellow
KFEAT: bdefgijklm = furniture
KFEAT: A = shopkeeper
KFEAT: ach = .
TILE: A = shopkeeper_3
FTILE: a = shelf_floor_3
TILE: b = shelf_key
FTILE: c = shelf_floor_1
TILE: d = shelf_potion
TILE: e = shelf_6
TILE: f = shelf_13
TILE: g = shelf_12
FTILE: h = shelf_floor_8
TILE: j = shelf_16
TILE: k = shelf_15
TILE: l = shelf_jewelry
TILE: m = alchemy_table
FTILE: bdefgijkm = village_tile_1
FTILE: A = village_tile_1
FTILE: l = wall_brick_yellow
KFEAT: B = distillery shop name:Jessica type:Potion suffix:Shop use_all count:18 greed:20 ; \
           potion of haste q:3 | potion of haste q:4 | potion of haste q:5 |\
           potion of agility q:6 | potion of might q:6 | potion of brilliance q:6 |\
           potion of mutation | potion of mutation q:2 | potion of mutation q:3 |\
           potion of resistance q:6 | potion of resistance q:6 | potion of magic q:6 |\
           potion of magic q:6 | potion of berserk rage q:5 | potion of berserk rage q:5
TILE: B = shop_panel_potions
KFEAT: C = antiques shop name:Jessica type:Antique-Jewelry suffix:Collection use_all count:8 greed:20 ; \
           any jewellery randart | any jewellery randart | any jewellery randart | any jewellery randart |\
           any jewellery randart | any jewellery randart | any jewellery randart | any jewellery randart
TILE: C = shop_panel_jewelry
KFEAT: D = distillery shop name:Jessica type:Healing suffix:Potions count:17 use_all greed:7 ; \
           potion of heal wounds q:3 | potion of heal wounds q:3 | potion of heal wounds q:3 |\
           potion of heal wounds q:3 | potion of heal wounds q:3 | potion of heal wounds q:3 |\
           potion of heal wounds q:3 | potion of heal wounds q:3 | potion of heal wounds q:3 |\
           potion of heal wounds q:3 | potion of heal wounds q:3 | potion of heal wounds q:3 |\
           potion of curing q:4 | potion of curing q:4 | potion of curing q:4 |\
           potion of curing q:4 | potion of curing q:4
TILE: D = shop_panel_potions
: lua_marker("+", portal_desc {door = 1})

MAP
xxxxxxlx
x.A.g.ax
xdebf.Cx
xaaac.jx
xD...Bkx
xm....hx
xxxx+xxx
ENDMAP

NAME: Arena_Shop_2
TAGS: arena_shop_2 no_item_gen no_trap_gen no_rotate no_hmirror no_vmirror no_pool_fixup no_monster_gen
FTILE: . = floor_pebble_lightgray
KFEAT: abcde = furniture
KFEAT: g = m
KFEAT: A = shopkeeper
TILE: g = wall_pebble_darkgray
TILE: a = shelf_7
TILE: b = shelf_armour
TILE: c = shelf_helmet
TILE: d = shelf_weapon_1
TILE: e = shelf_weapon_2
TILE: A = male_blacksmith
FTILE: abcde = floor_pebble_lightgray
FTILE: A = floor_pebble_lightgray
KFEAT: B = weapon shop name:Bendrick type:Sufficient suffix:Weapons use_all count:17 greed:30 ; \
           mundane not_cursed quick blade | mundane not_cursed great sword |\
           mundane not_cursed demon blade | mundane not_cursed triple sword |\
           mundane not_cursed broad axe | mundane not_cursed executioner's axe |\
           mundane not_cursed demon whip | mundane not_cursed great mace |\
           mundane not_cursed giant spiked club | mundane not_cursed demon trident |\
           mundane not_cursed bardiche | mundane not_cursed lajatang
TILE: B = shop_panel_weapons
KFEAT: C = armour shop name:Bendrick type:Decent suffix:Armour use_all count:17 greed:12 ; \
           mundane not_cursed storm dragon scales | mundane not_cursed fire dragon scales |\
           mundane not_cursed shadow dragon scales | mundane not_cursed quicksilver dragon scales |\
           mundane not_cursed ice dragon scales | mundane not_cursed gold dragon scales |\
           mundane not_cursed steam dragon scales | mundane not_cursed swamp dragon scales |\
           mundane not_cursed pearl dragon scales | mundane not_cursed acid dragon scales |\
           mundane not_cursed troll leather armour | mundane not_cursed crystal plate armour |\
           mundane not_cursed plate armour | mundane not_cursed naga barding |\
           mundane not_cursed centaur barding | mundane not_cursed cloak |\
           mundane not_cursed buckler | mundane not_cursed pair of gloves |\
           mundane not_cursed helmet
TILE: C = shop_panel_armour
KFEAT: D = antique armour shop name:Bendrick type:Advanced suffix:Armour use_all count:17 greed:35 ; \
           pair of gloves randart | pair of gloves randart | pair of boots randart |\
           pair of boots randart | helmet randart | hat randart | buckler randart |\
           shield randart | cloak randart | cloak randart | robe randart | animal skin randart |\
           large shield randart | robe randart | buckler randart | leather armour randart
TILE: D = shop_panel_armour
KFEAT: E = antique weapon shop name:Bendrick type:Unique suffix:Weapons use_all count:8 greed:80 ; \
           long sword randart ego:flaming | long sword randart | great sword randart | war axe randart |\
           great mace randart | dagger randart | battleaxe randart | spear randart ego:freezing
TILE: E = shop_panel_weapons

MAP
..de.....
c.aa.ggg.
aEBA.glg.
bD...ggg.
aC.......
ENDMAP

NAME: Arena_Shop_3
TAGS: arena_shop_3 no_item_gen no_trap_gen no_rotate no_hmirror no_vmirror
FTILE: . = village_tile_1
RTILE: x = wall_brick_yellow
KFEAT: cdefghij = furniture
KFEAT: A = shopkeeper
KFEAT: ab = .
FTILE: a = shelf_floor_3
FTILE: b = shelf_floor_1
TILE: A = shopkeeper_2
TILE: c = shelf_13
TILE: d = shelf_12
TILE: e = bookshelf_1
TILE: f = bookshelf_2
TILE: g = bookshelf_3
TILE: h = bookshelf_4
TILE: i = shelf_wand
TILE: j = shelf_book
FTILE: cdghij = village_tile_1
FTILE: A = village_tile_1
FTILE: ef = wall_brick_yellow
KFEAT: B = book shop name:Gandalf type:Spell suffix:Repository use_all count:18 greed:20 ; \
           book of summonings | book of spatial translocations | book of enchantments |\
           book of death | book of the sky | book of the warp |\
           book of the earth | book of burglary | book of annihilations |\
           grand grimoire | necronomicon
TILE: B = shop_panel_books
KFEAT: C = weapon shop name:Gandalf type:Must-have suffix:Staves use_all count:9 greed:30 ; \
           staff of summoning | staff of wizardry |\
           staff of fire | staff of air | staff of earth | staff of cold |\
           staff of poison | staff of death | staff of conjuration
TILE: C = shop_panel_staves
KFEAT: D = armour shop name:Gandalf type:Magic suffix:Apparel use_all count:6 greed:20 ; \
           not_cursed robe level:2 tile:alchemists_robes_1 wtile:alchemists_coat_with_pants ego:resistance |\
           not_cursed hat level:3 tile:alchemists_hood_1 wtile:alchemists_hood ego:intelligence |\
           not_cursed pair of gloves level:2 wtile:alchemists_gloves ego:magic_resistance |\
           not_cursed robe level:5 tile:alchemists_robes_1 wtile:alchemists_coat_scrolls_with_pants ego:archmagi |\
           not_cursed ring of flight | not_cursed ring of magical power
TILE: D = shop_panel_magic_armour
: lua_marker("+", portal_desc {door = 1})

MAP
xx+xefx
x...ghx
x..BCdx
xDAjicx
x..aabx
xxxxxxx
ENDMAP

NAME: Arena_Shop_4
TAGS: arena_shop_4 no_item_gen no_trap_gen no_rotate no_hmirror no_vmirror
FTILE: . = village_tile_1
RTILE: x = wall_brick_yellow
KFEAT: b = furniture
KFEAT: aefgh = .
KFEAT: A = shopkeeper
TILE: A = shopkeeper_1
FTILE: e = scroll_floor_1
FTILE: f = scroll_floor_2
FTILE: g = scroll_floor_3
FTILE: h = scroll_floor_4
FTILE: a = shelf_floor_3
TILE: b = shelf_scroll
FTILE: b = wall_brick_yellow
FTILE: A = village_tile_1
KFEAT: B = scroll shop name:Jeremy type:Identification suffix:Station count:17 greed:25 ; scroll of identify q:3
TILE: B = shop_panel_scrolls
KFEAT: C = scroll shop name:Jeremy type:Scrolls suffix:Prestige greed:10 use_all count:14 ; \
           scroll of blinking q:3 | scroll of blinking q:4 | scroll of blinking q:5 |\
           scroll of fog q:3 | scroll of fog q:4 | scroll of fog q:5 |\
           scroll of silence q:3 | scroll of brand weapon | scroll of vulnerability q:3 |\
           scroll of amnesia q:5 | scroll of remove curse q:15 | scroll of enchant weapon q:8 |\
           scroll of enchant armour q:4 | scroll of enchant armour q:4
TILE: C = shop_panel_scrolls
: lua_marker("+", portal_desc {door = 1})

MAP
xxxxbx
xeeeax
xefgCx
+....x
xhBA.x
xxxxxx
ENDMAP

NAME: Arena_Inn
TAGS: arena_inn no_item_gen no_trap_gen no_rotate no_hmirror no_vmirror
FTILE: . = village_tile_1
RTILE: x = wall_brick_yellow
KFEAT: afghijklmnop = furniture
KFEAT: AB = shopkeeper
KFEAT: C = civilian
KFEAT: bcde = .
TILE: a = shelf_6
FTILE: b = shelf_floor_3
FTILE: c = shelf_floor_4
FTILE: d = shelf_floor_5
FTILE: e = shelf_floor_6
TILE: A = female_innkeeper
TILE: B = male_innkeeper
TILE: C = some_dude
TILE: f = shelf_18
TILE: g = shelf_apple
TILE: h = table_cake
TILE: i = chair_1
TILE: j = chair_2
TILE: k = chair_3
TILE: l = chair_4
TILE: m = table_cards
TILE: n = table_pizza
TILE: o = table_food
TILE: p = bucket_1
FTILE: afghijklnmop = village_tile_1
FTILE: BC = village_tile_1
FTILE: A = shelf_floor_3
KFEAT: D = general shop name:Randolf-the-Trader type:Smuggled suffix:Valuables use_all count:13 greed:30 ; \
           quad damage | quad damage | quad damage |\
           potion of heal wounds q:5 | potion of heal wounds q:5 |\
           potion of haste q:5 | potion of haste q:5 |\
           crystal ball of energy | storm bow |\
           ring of the mage | Kryia's mail coat | hat of pondering | autumn katana
TILE: D = shop_panel_misc
KFEAT: E = general shop name:Randolf-the-Trader type:General suffix:Goods use_all count:14 greed:15 ; \
           potion of blood q:5 | potion of blood q:5 | potion of blood q:5 |\
           potion of blood q:5 | ring of poison resistance | ring of protection from fire |\
           ring of protection from cold | ring of protection from magic | amulet of regeneration |\
           amulet of the gourmand | amulet of harm | amulet of reflection | ring of see invisible
TILE: E = shop_panel_misc
KFEAT: F = food shop count:17 name:Gertrude type:Delicious suffix:Food greed:4 ; ration q:2
TILE: F = shop_panel_food
: lua_marker("+", portal_desc {door = 1})

MAP
xxxx+xxxx
x.iC...ix
xjmk...nx
x.l....lx
xok..EB.x
x.....Dhx
xp..F...x
xagfaaaax
xdeeAbbcx
xxxxxxxxx
ENDMAP

NAME: Arena_Shop_5
TAGS: arena_shop_5 no_item_gen no_trap_gen no_rotate no_hmirror no_vmirror
FTILE: . = cottage_floor
RTILE: x = cottage_wall
KFEAT: hnop = .
KFEAT: abcdefgijklm = furniture
KFEAT: A = shopkeeper
TILE: a = cottage_wall_window
TILE: b = cottage_wall_window_2
TILE: c = shelf_bow
TILE: d = shelf_side_bow
TILE: e = shelf_side_tomahawks
TILE: f = shelf_side_crossbow
TILE: g = shelf_side_arrows
FTILE: h = shelf_floor_3_cottage
FTILE: n = shelf_floor_8_cottage
FTILE: o = shelf_floor_1_cottage
TILE: i = shelf_6
FTILE: p = shelf_floor_4_cottage
FTILE: ab = floor_grass
FTILE: cdefgi = cottage_floor
TILE: A = elf_male_bowsman
FTILE: A = cottage_floor
KFEAT: B = weapon shop name:Elfearian type:Archery suffix:Shack-of-Wonders use_all count:24 greed:20 ; \
           mundane not_cursed shortbow | mundane not_cursed longbow |\
           mundane not_cursed hand crossbow | mundane not_cursed arbalest |\
           tomahawk q:20 | tomahawk q:20 | tomahawk q:20 | tomahawk q:20 |\
           arrow q:20 | arrow q:20 | arrow q:20 | arrow q:20 | arrow q:20 |\
           tomahawk q:20 ego:exploding | tomahawk q:20 ego:poisoned | bolt q:20 |\
           bolt q:20 | bolt q:20 | bolt q:20 | bolt q:20 | bolt q:20 ego:steel |\
           bolt q:20 ego:steel
TILE: B = shop_panel_archery
KFEAT: C = armour shop name:Elfearian type:Slick suffix:Garbs use_all count:10 greed:50 ; \
           not_cursed leather armour level:3 ego:magic_resistance tile:hunters_armour_1 wtile:hunters_coat_with_pants |\
           not_cursed pair of boots ego:running wtile:hunters_boots |\ 
           not_cursed pair of gloves ego:archery wtile:hunters_gloves |\
           not_cursed hat ego:cold_resistance tile:cowl_1 wtile:hunters_cowl |\
           not_cursed cloak ego:poison_resistance wtile:green |\
           not_cursed cloak ego:invisibility wtile:magenta |\
           not_cursed longbow ego:freezing
TILE: C = shop_panel_archery
: lua_marker("+", portal_desc {door = 1})

MAP
xaxxbx
x.A..x
xiicix
xhhhpx
xe.Cfx
xo.Bdx
+...nx
xxxxxx
ENDMAP

NAME: Rocky_Path_2
TAGS: rocky_path_2 no_item_gen no_trap_gen no_rotate no_hmirror no_vmirror
FTILE: . = floor_orc
RTILE: x = wall_orc

MAP
xxxxxxxxxxxxxxxxxxx
xxx.....x.........x
xxx.....x.....xxxxx
xxx..x.xx..xx.xx...
.....x.....xx.xx.xx
xxxxxxxxxxxxx....xx
xxxxxxxxxxxxxxxxxxx
ENDMAP

NAME: Training_Area_2
TAGS: training_area_2 no_item_gen no_trap_gen no_rotate no_hmirror no_vmirror no_pool_fixup
KFEAT: eSz7/ = x
KFEAT: fmnopqkrRu0*& = .
KFEAT: l = shopkeeper
FTILE: . = floor_grey_dirt
RTILE: x = wall_orc
FTILE: m = floor_slime
FTILE: n = floor_swamp
FTILE: o = floor_mud
FTILE: p = floor_moss
FTILE: q = floor_woodground
RTILE: e = wall_vines
FTILE: r = floor_vines
KFEAT: s = deep_water
TILE: s = shoals_deep_water
KFEAT: g = clear_rock_wall
TILE: g = dngn_grate
KFEAT: hi = .
FTILE: h = SHIP_TILE_62
FTILE: i = floor_pebble_lightgray
RTILE: S = wall_vines
FTILE: S = floor_vines
MONS: storm dragon, hound hp:10, training dummy hp:5 ; shortbow \
      not_cursed mundane . arrow q:20, \
      col:blue goblin name:island_goblin_archer name_replace; shortbow \
      not_cursed mundane . arrow q:20, \
      col:blue goblin name:island_goblin_cutthroat name_replace; \
      dagger not_cursed mundane
KITEM: V = potion of heal wounds q:5 ident:all
KFEAT: ajABCDEFGKIJKLMNOPQUVXZ89?!#< = .
FTILE: ajABCDEFGIJKLMNOPQUVXZ89?!#< = tutorial_pad
COLOUR: ajABCDEFGIJKLMNOPQUVXZ89?!#< = lightblue
KITEM: N = tomahawk q:20 mundane
KITEM: Q = arrow q:20 mundane
KFEAT: H = ominous_space
TILE: H = spooky_grass_spawn_point_blue
FTILE: f = spooky_grass_blue
FTILE: k = spooky_grass_energy_blue
FTILE: R = pressure_plate_active
MARKER: B = lua:tutorial6.msg("options")
MARKER: j = lua:tutorial6.msg("adventuring_2")
MARKER: D = lua:tutorial6.msg("sprinting")
MARKER: E = lua:tutorial6.msg("opening_doors")
MARKER: F = lua:tutorial6.msg("closing_doors")
MARKER: G = lua:tutorial6.msg("examining_enemies_1")
MARKER: a = lua:tutorial6.msg("examining_enemies_2")
MARKER: I = lua:tutorial6.msg("leveling_up")
MARKER: J = lua:tutorial6.msg("skills_1")
MARKER: K = lua:tutorial6.msg("skills_2")
MARKER: L = lua:tutorial6.msg("skills_3")
MARKER: M = lua:tutorial6.msg("increasing_attributes")
MARKER: N = lua:tutorial6.msg("ranged_combat_1")
MARKER: O = lua:tutorial6.msg("ranged_combat_2")
MARKER: P = lua:tutorial6.msg("ranged_combat_3")
MARKER: Q = lua:tutorial6.msg("ranged_combat_4")
MARKER: U = lua:tutorial6.msg("auto_pickup_1")
MARKER: V = lua:tutorial6.msg("potions_1")
MARKER: X = lua:tutorial6.msg("shops_2")
MARKER: Z = lua:tutorial6.msg("pressure_plates_1")
MARKER: 8 = lua:tutorial6.msg("jewelry_3")
MARKER: 9 = lua:tutorial6.msg("cursed_equipment")
MARKER: ? = lua:tutorial6.msg("gold")
MARKER: ! = lua:tutorial6.msg("shops_1")
MARKER: # = lua:tutorial6.msg("pressure_plates_2")
MARKER: < = lua:tutorial6.msg("adventuring_3")
{{
local raise_bridge_marker = TriggerableFunction:new {
    func = "hero_mode_raise_bridge"
}

raise_bridge_marker:add_triggerer(DgnTriggerer:new {
    type = "player_move"
})

local blow_up_wall_marker = TriggerableFunction:new {
    func = "hero_mode_blow_up_wall",
    data = {
        active = false,
        already_pressed = false
    },
    repeated = true
}

blow_up_wall_marker:add_triggerer(DgnTriggerer:new {
    type = "player_move"
})

blow_up_wall_marker:add_triggerer(DgnTriggerer:new {
    type = "turn",
    delay = 1
})

local open_wall_marker = TriggerableFunction:new {
    func = "hero_mode_open_wall",
    data = {
        marker = blow_up_wall_marker
    }
}

open_wall_marker:add_triggerer(DgnTriggerer:new {
    type = "player_move"
})

local set_monster_respawning_marker_3 = TriggerableFunction:new {
    func = "hero_mode_set_monster_respawning",
    data = {
        marker = monster_management_marker
    },
    repeated = true
}

set_monster_respawning_marker_3:add_triggerer(DgnTriggerer:new {
    type = "player_move"
})

lua_marker("s", portal_desc {submerged_bridge = 1})
lua_marker("S", portal_desc {stone_wall = 1})
lua_marker("R", raise_bridge_marker)
lua_marker("R", portal_desc {pressure_plate = 3})
lua_marker("H", set_monster_respawning_marker_3)
lua_marker("+", portal_desc {door = 1})
lua_marker("7", portal_desc {stone_wall = 2})
lua_marker("0", open_wall_marker)
lua_marker("0", portal_desc {pressure_plate = 5})
lua_marker("*", blow_up_wall_marker)
lua_marker("*", portal_desc {pressure_plate = 6})
lua_marker("/", portal_desc {rock_wall = 1})
lua_marker("&", portal_desc {ground = 1})
}}
FTILE: s = SHIP_TILE_62
FTILE: 12 = floor_vines
FTILE: 345 = floor_woodground
KFEAT: T = tree
FTILE: T = floor_woodground
FTILE: t = floor_woodground
TILE: t = DNGN_TREE_YELLOW
TILE: T = DNGN_TREE_RED
TILE: l = shady_merchant
FTILE: l = floor_woodground
KFEAT: Y = general shop name:Vlad type:General suffix:Goods use_all count:16 greed:15 ; \
           not_cursed scale mail mundane | not_cursed chain mail mundane |\
           not_cursed buckler mundane | not_cursed shield mundane |\
           not_cursed pair of boots mundane useful | not_cursed scarf ego:repulsion |\
           not_cursed scarf ego:spirit_shield | not_cursed dagger mundane |\
           not_cursed rapier mundane | not_cursed war axe mundane |\
           not_cursed battleaxe mundane | not_cursed great sword ego:flaming |\
           not_cursed spear mundane | not_cursed glaive ego:freezing |\
           not_cursed shield ego:reflection | not_cursed ring of slaying
TILE: Y = shop_panel_misc_2
KITEM: 6 = not_cursed shortbow mundane
FTILE: 6 = floor_vines
FTILE: u = graveyard_grass
RTILE: z = dngn_open_sea
TILE: w = shoals_deep_water
TILE: W = shoals_shallow_water
KITEM: 8 = scroll of remove curse
FTILE: 0 = pressure_plate_active
RTILE: 7 = wall_vines
FTILE: 7 = floor_vines
KITEM: $ = gold q:20
FTILE: $ = floor_vines
FTILE: * = pressure_plate_active
FTILE: & = floor_moss
RTILE: & = wall_orc
RTILE: / = wall_orc
FTILE: / = floor_orc
SUBVAULT: C : hero_mode_cathedral
SUBVAULT: A : hero_mode_dark_fortress

MAP
xxxxxxxxxxxxxxxqqeAAAAAAAAz
xqqrNrqOqWwwWq3qqeAAAAAAAAz
xqMrerrqqWwwWq3qqeAAAAAAAAz
xqLrerQqqqWwwWtqqeAAAAAAAAz
xqKree6rqqqWwwweSeeAAAAAAAz
xrJIreerrqqssssqq4eAAAAAAAz
xrrrrrerPqZWwwWq4qeAAAAAAAz
x+geg+etrqRqWwwW5qeAAAAAAAz
x1rer2eeeeeeewwwWWwwhwwwwwz
xrrerre$$$<qqWWwwwwwiwwwwwz
x+geg+e$$rrqqqqwwwwwhwwwwwz
xqqqrreer?r98qqwwwwwhwwwwwz
xTraGrrerrrrrrrrrrrrrwwwwwz
xeeerrFe0rreeeeee7eeeewwwwz
xqqeee+eeeeeq!qqqqqqqqwwwwz
/qq&qqqqqlqqqqqquuuuuqwwwwz
/ppp&pEppYqqqqquffffuwwwwwz
/p&oooooooooppqufkHfuwwwwwz
xppoXCCCCCCCCCCCCCCCCwwwwwz
xp*opCCCCCCCCCCCCCCCCwwwwwz
xp#oVCCCCCCCCCCCCCCCCwwwwwz
xppopCCCCCCCCCCCCCCCC..wwwz
xppUpCCCCCCCCCCCCCCCC...wwz
xppopCCCCCCCCCCCCCCCC....wz
xppopCCCCCCCCCCCCCCCC....wz
xppopCCCCCCCCCCCCCCCC....wz
xppjpCCCCCCCCCCCCCCCC..wwwz
xppopCCCCCCCCCCCCCCCCwwwwwz
xppopCCCCCCCCCCCCCCCCwwwwwz
xppopCCCCCCCCCCCCCCCC.wwwwz
xppoooooooooppppp......wwwz
x..popppppppp..........wwwz
...Do..xxxxxxxxxxxxxxxwwwwz
....o..x
....o..x
x...B..x
x...o..x
xxxx..xx
ENDMAP

NAME: Hero_Mode_Cathedral
TAGS: hero_mode_cathedral no_item_gen no_trap_gen no_rotate no_hmirror no_vmirror
KFEAT: fcpqdeg = .
KFEAT: ab = x
FTILE: . = floor_grey_dirt
RTILE: a = wall_catacombs
RTILE: b = wall_crypt_metal
FTILE: q = floor_woodground
FTILE: c = floor_rough_red
FTILE: p = floor_moss
FTILE: f = floor_crypt
RTILE: x = wall_orc
FTILE: d = spooky_grass_blue
FTILE: e = spooky_grass_energy_2_blue
FTILE: g = graveyard_grass
: lua_marker("+", portal_desc {door = 1})

MAP
ppaaa++aaaggdedg
paaffffffaaggggg
aaffffffffaaaaaa
affbbffbbffffffa
affbffffbfccccfa
affbfccfbfccccf+
affbfccfbfccccf+
affbffffbfccccfa
affbbffbbffffffa
aaffffffffaaaaaa
paaffffffaappppp
ppaaa++aaappp...
ENDMAP

NAME: Hero_Mode_Dark_Fortress
TAGS: hero_mode_dark_fortress no_item_gen no_trap_gen no_rotate no_hmirror no_vmirror
RTILE: x = dngn_stone_dark
FTILE: . = cottage_floor
KFEAT: AB = .
FTILE: AB = tutorial_pad
MARKER: A = lua:tutorial6.msg("jewelry_1")
MARKER: B = lua:tutorial6.msg("jewelry_2")
KITEM: A = amulet of inaccuracy mundane cursed
: lua_marker("+", portal_desc {door = 1})

MAP
x......x
x.xxxxxx
x.+....x
xxx..A.x
 x.....x
 x.....x
 xB....x
 x+xxxxx
ENDMAP

NAME: Oasis_2
TAGS: oasis_2 no_item_gen no_trap_gen no_rotate no_hmirror no_vmirror no_pool_fixup
KFEAT: ab = G
KFEAT: cABCD = .
FTILE: . = floor_moss
RTILE: x = wall_orc
TILE: t = DNGN_MANGROVE
FTILE: t = floor_moss
TILE: a = dngn_gravestone
TILE: b = dngn_gravestone_ornate
FTILE: a = floor_moss
FTILE: b = floor_moss
FTILE: c = floor_vines
FTILE: ABC = tutorial_pad
MARKER: A = lua:tutorial6.msg("adventuring_4")
MARKER: B = lua:tutorial6.msg("necromancy_2")
MARKER: C = lua:tutorial6.msg("necromancy_3")
KITEM: C = randbook numspells:1 spells:animate_skeleton title:Dark_Arts_101 owner:Vlad
KITEM: d = scroll of amnesia ident:type
KITEM: e = never_decay bat skeleton / never_decay goblin; nothing skeleton
KITEM: f = never_decay ball python skeleton / never_decay jackal skeleton
KITEM: g = never_decay ogre; nothing skeleton
FTILE: defg = floor_vines

MAP
xxxxxx.xxxx
xttttt.tttx
xt.......tx
xt.WWWWW.tx
xt.WwwwW.tx
xt.WwwwW..x
xt.WWWWWx..
xt.....A...
x..t....x.x
x.....c...x
x.a.b.Ba.tx
xccdC.fefex
xga.a.ea.cx
xgc.cef.ffx
xxxxxxxxxxx
ENDMAP

NAME: Cave_2
TAGS: cave_2 no_item_gen no_trap_gen no_rotate no_hmirror no_vmirror no_pool_fixup
KFEAT: amABCDE = .
KFEAT: bcde = x
KFEAT: fghijkl = furniture
FTILE: . = floor_pebble_brown
RTILE: x = wall_pebble_brown
FTILE: a = cottage_floor
RTILE: b = cottage_wall
RTILE: c = cottage_wall_cracked
RTILE: d = cottage_wall_cracked_2
RTILE: e = cottage_wall_torch
TILE: f = table_cards
TILE: g = chair_1
TILE: h = chair_2
TILE: i = chair_4
TILE: j = chair_3
FTILE: ghi = floor_pebble_brown
FTILE: + = floor_pebble_brown
TILE: k = table_food
TILE: l = worn_bed_bottom
FTILE: m = cottage_floor_worn_bed_top
FTILE: jkl = cottage_floor
MONS: sigmund hp:100, dowan, duvessa, terence
FTILE: 1 = cottage_floor
FTILE: 234 = floor_pebble_brown
KITEM: F = potion of heal wounds q:5 ident:all no_pickup
FTILE: F = floor_pebble_brown
KITEM: G = never_decay goblin; nothing skeleton
KITEM: H = never_decay bat skeleton
FTILE: GH = floor_pebble_brown
FTILE: ABCDE = tutorial_pad
MARKER: A = lua:tutorial6.msg("necromancy_4")
MARKER: B = lua:tutorial6.msg("necromancy_5")
MARKER: C = lua:tutorial6.msg("necromancy_6")
MARKER: D = lua:tutorial6.msg("necromancy_7")
MARKER: E = lua:tutorial6.msg("conclusion")
: lua_marker("+", portal_desc {door = 1})

MAP
xxxxxxxxxxxxxxx
xaaaa...wwwwxxx
xmaaaaE..wwwxxx
xla1aaa...xxxxx
xaaaaaa...b.xxx
xkjaaaaaaab..xx
xaaaaaaaaa+..Gx
xxbbbcdbbbb..Hx
xxF.GG.H.D...xx
xxx.4.g..3..xxx
xxx..hf.2...xxx
xx.G..i......xx
xxxxxxxxx.....xxxxx
        x.......xxx
        xbdb+bbcbbx
        x...C.....x
        xxx......xx
        xxxxx.B.xxx
        xxxxx.A.xxx
        xxxxxx.xxxx
ENDMAP

NAME: Rocky_Shore_2
TAGS: rocky_shore_2 no_item_gen no_trap_gen no_rotate no_hmirror no_vmirror no_pool_fixup
KFEAT: sbpef = .
KFEAT: rd = x
KFEAT: a = shallow_water
KFEAT: H = ominous_space
TILE: H = spooky_grass_spawn_point_blue
FTILE: b = halo_dirt
FTILE: s = floor_sand
FTILE: . = floor_pebble_lightgray
FTILE: p = tutorial_pad
TILE: w = shoals_deep_water
TILE: a = shoals_shallow_water
RTILE: x = wall_orc
RTILE: r = wall_shoals
TILE: d = dngn_open_sea
KMONS: c = bush
FTILE: P = floor_pebble_lightgray
FTILE: c = halo_dirt
KFEAT: BCDEFG = .
FTILE: BCDEFG = tutorial_pad
COLOUR: BCDEFG = lightblue
MARKER: B = lua:tutorial6.msg("viewing_messages")
MARKER: C = lua:tutorial6.msg("diagonal_movement")
MARKER: D = lua:tutorial6.msg("water")
MARKER: E = lua:tutorial6.msg("combat_2")
MARKER: F = lua:tutorial6.msg("food")
MARKER: G = lua:tutorial6.msg("respawning")
KMONS: 1 = rat always_corpse
FTILE: 1 = halo_dirt
FTILE: e = ship_tile_62
FTILE: f = spooky_grass_blue

{{
local set_monster_respawning_marker_2 = TriggerableFunction:new {
    func = "hero_mode_set_monster_respawning",
    data = {
        marker = monster_management_marker
    },
    repeated = true
}

set_monster_respawning_marker_2:add_triggerer(DgnTriggerer:new {
    type = "player_move"
})

lua_marker("H", set_monster_respawning_marker_2)
}}
SUBVAULT: A : hero_mode_boat

MAP
                           AAAAAAAAAAAAAAwwwwd
                           AAAAAAAAAAAAAAwwwwd
                           AAAAAAAAAAAAAAwwwwd
                           AAAAAAAAAAAAAAwwwwd
                           AAAAAAAAAAAAAAwwwwd
rrrrrrrrrxxxxxxxxxxxxxx..xxAAAAAAAAAAAAAAwwwwd
r..........................AAAAAAAAAAAAAAwwwwd
r.................wwwwwwwwwAAAAAAAAAAAAAAwwwwd
r.....wwwwwwwwwwwwwwwwwwwwwAAAAAAAAAAAAAAwwwwd
r....wwwwwwwwwwwwwwwwwwwwwwAAAAAAAAAAAAAAwwwwd
r..rrrrwwwwwwwwwwwww....wwwAAAAAAAAAAAAAAwwwwd
rrr....aaaaawwwww..bcbbb.eeAAAAAAAAAAAAAAwwwwd
r..C.bbbsssswwwwww.1bbbb.wwAAAAAAAAAAAAAAwwwwd
r..bbbcbbssseaDeeF.b1Eb..wwAAAAAAAAAAAAAAwwwwd
r.bbbbbbssssaawww.b1bcb.wwwAAAAAAAAAAAAAAwwwwd
r.bGbcbsssaaawwwww.B...wwwwAAAAAAAAAAAAAAwwwwd
rbbHbbbssaawwwwwwwww..wwwwwAAAAAAAAAAAAAAwwwwd
dsssssssawwwwwwwwwwwwwwwwwwAAAAAAAAAAAAAAwwwwd
daaaaaawwwwwwwwwwwwwwwwwwwwAAAAAAAAAAAAAAwwwwd
dwwwwwwwwwwwwwwwwwwwwwwwwwwAAAAAAAAAAAAAAwwwwd
dddddddddddddddddddddddddddAAAAAAAAAAAAAAddddd
ENDMAP

NAME: Hero_Mode_Boat
TAGS: hero_mode_boat no_item_gen no_trap_gen no_rotate no_hmirror no_vmirror no_pool_fixup
KFEAT: d = x
RTILE: x = wall_orc
TILE: w = shoals_deep_water
TILE: d = dngn_open_sea
# For boat building
KFEAT: ABCDEFGHIJKLMNOPQRSTUVWXYZ = furniture
KFEAT: 12345 = .
KFEAT: ghijklmnoqt = furniture
KFEAT: 67890 = furniture
TILE: A = SHIP_TILE_10
TILE: B = SHIP_TILE_11
TILE: C = SHIP_TILE_20
TILE: D = SHIP_TILE_21
TILE: E = SHIP_TILE_22
TILE: F = SHIP_TILE_14
TILE: G = SHIP_TILE_17
TILE: H = SHIP_TILE_18
TILE: I = SHIP_TILE_6
TILE: J = SHIP_TILE_15
TILE: K = SHIP_TILE_5
TILE: L = SHIP_TILE_7
FTILE: 1 = SHIP_TILE_62
TILE: M = SHIP_TILE_12
TILE: N = SHIP_TILE_9
TILE: O = SHIP_TILE_4
TILE: P = SHIP_TILE_3
TILE: Q = SHIP_TILE_63
TILE: S = SHIP_TILE_64
FTILE: 2 = SHIP_TILE_61
TILE: U = SHIP_TILE_68
TILE: V = SHIP_TILE_70
TILE: W = SHIP_TILE_23
TILE: X = SHIP_TILE_43
TILE: Y = SHIP_TILE_27
TILE: Z = SHIP_TILE_41
TILE: g = SHIP_TILE_28
TILE: h = SHIP_TILE_40
TILE: i = SHIP_TILE_30
TILE: j = SHIP_TILE_38
FTILE: 3 = SHIP_TILE_29
FTILE: 4 = SHIP_TILE_39
TILE: k = SHIP_TILE_31
TILE: l = SHIP_TILE_37
TILE: m = SHIP_TILE_52
TILE: n = SHIP_TILE_53
TILE: o = SHIP_TILE_13
TILE: q = SHIP_TILE_50
TILE: t = SHIP_TILE_51
TILE: T = SHIP_TILE_54
TILE: R = SHIP_TILE_35
FTILE: 5 = SHIP_TILE_49
TILE: 6 = SHIP_TILE_60
TILE: 7 = SHIP_TILE_59
TILE: 8 = SHIP_TILE_58
TILE: 9 = SHIP_TILE_57
FTILE: 6789R = SHIP_TILE_62
FTILE: EDCGFBYZghklmnqtT = shoals_deep_water
TILE: 0 = SHIP_TILE_66
KFEAT: vy = .
KFEAT: z! = furniture
FTILE: v = SHIP_TILE_32
FTILE: y = SHIP_TILE_36
TILE: z = SHIP_TILE_55
TILE: ! = SHIP_TILE_56
FTILE: z! = shoals_deep_water
KFEAT: abef( = .
FTILE: abef( = tutorial_pad
COLOUR: abef( = lightblue
KITEM: b = long sword not_cursed mundane
KITEM: / = ring mail not_cursed mundane
FTILE: / = SHIP_TILE_62
KITEM: c = pair of boots mundane not_cursed useful
FTILE: c = SHIP_TILE_62
MARKER: { = lua:tutorial6.msg("movement")
MARKER: e = lua:tutorial6.msg("weapons")
MARKER: a = lua:tutorial6.msg("combat_1")
MARKER: b = lua:tutorial6.msg("picking_up_items")
MARKER: f = lua:tutorial6.msg("equipping_items")
MARKER: ( = lua:tutorial6.msg("armour")
{{

local armour_pickup_marker = TriggerableFunction:new {
    func = "hero_mode_armour_pickup"
}

local boots_pickup_marker = TriggerableFunction:new {
    func = "hero_mode_boots_pickup"
}

armour_pickup_marker:add_triggerer(DgnTriggerer:new {
    type = "item_pickup",
    target = "ring mail"
})

boots_pickup_marker:add_triggerer(DgnTriggerer:new {
    type = "item_pickup",
    target = "pair of boots"
})

lua_marker("/", armour_pickup_marker)
lua_marker("c", boots_pickup_marker)

--introduction_1 = "<yellow>As you rest in the cabin of your ship, you feel the ship steadily come to "
--                .. "a halt. 'Land ho! Land ho!' You hear from the deck just outside of your "
--                .. "cabin. It seems that the merchant ship you hired came through on its "
--                .. "promise to deliver you to the country of</yellow> <green>Grim Haven</green><yellow>, a land ripe with "
--                .. "monsters and ruined villages.</yellow>"
--
--introduction_2 = "<yellow>There is, however, one attraction that brings adventurers and civilians "
--                .. "alike to this desolate land:</yellow> <brown>The Arena</brown><yellow>. "
--                .. "The Arena is a proving ground filled with the dangerous monsters that "
--                .. "foolhardy merchants have gathered from the continent in order to provide "
--                .. "a spectacle for those who have scarcely witnessed monsters before.</yellow>"
--
--introduction_3 = "<yellow>Although it has this less than glorifying reputation, it has still served as a "
--                .. "gathering place for legendary heroes who wish to show their mettle.</yellow>"
--
--introduction_4 = "<yellow>Reputation gains are hardly important to you, but the opportunity to "
--                .. "face challenging monsters sets your blood on fire in a way that nothing "
--                .. "else can. And if you rid the world of a few of those savage beasts in the "
--                .. "process, all the better.</yellow>"

--introduction_5 = "<yellow>You have journeyed to this land to enter into the "
--                .. "arena and spill some blood. \n Good luck!</yellow>"

introduction_1 = "<magenta>Hi! Welcome to the Hero Mode mod of DCSS. Your goal will be "
                 .. "to make your way to the arena, and to become the arena champion. Should "
                 .. "you accept this challenge, then press 'enter' (In general, when you see "
                 .. "</magenta> <cyan>--more--</cyan> <magenta>, press enter to continue).</magenta>"
introduction_2 = "<magenta>Good luck!</magenta>"
crawl.mpr(introduction_1)
crawl.more()
crawl.mpr(introduction_2)
crawl.more()
}}

MAP
xxxxxxxxxxxxxx
xwwwwwzT!wwwww
xwwwwmq5tnwwww
xwwwwkv1ylwwww
xwwwgi111jhwww
xwwwY3c114Zwww
wwwwW1/911Xwww
wwwwW1(811Xwww
wwwwW1f711Xwww
wwwwW1b611Xwww
wwwwW10001Xwww
a11111MRO1Xwww
wwwwWeM1O1Xwww
wwwwN1S2V1Pwww
wwwwM{Q2U1Owww
wwwwJ11111Kwww
wwwwHLLLLLIwww
wwwwCAAAAABwww
wwwwDoooooFwww
wwwwEoooooGwww
dddddddddddddd
ENDMAP

NAME: Frozen_lands_2
TAGS: frozen_lands_2 no_item_gen no_trap_gen no_rotate no_hmirror no_vmirror no_pool_fixup
TILE: t = DNGN_TREE_DEAD
KFEAT: abcklKs! = .
KFEAT: fghijJz? = x
FTILE: . = floor_woodground
FTILE: a = floor_ice
FTILE: b = floor_frozen
KFEAT: Te = tree
TILE: T = dngn_tree_red
TILE: e = dngn_tree_yellow
RTILE: x = wall_pebble_white
FTILE: t = floor_ice
FTILE: c = floor_pebble_white
RTILE: g = wall_ice
RTILE: h = wall_ice_block
RTILE: i = wall_brick_dark_6
RTILE: j = wall_brick_dark_6_torch
FTILE: k = floor_grey_dirt_b
FTILE: l = SHIP_TILE_62
KITEM: B = scroll of fog q:1
KITEM: D = scroll of fear q:1
KITEM: F = scimitar ego:venom not_cursed no_pickup
KMONS: m = hobgoblin name:hobgoblin_ambusher name_replace ; \
           long sword not_cursed mundane
KMONS: n = hobgoblin ; long sword not_cursed mundane
FTILE: m = floor_ice
FTILE: n = floor_ice
RTILE: J = wall_ice_block
FTILE: J = SHIP_TILE_62
FTILE: K = pressure_plate_active
KITEM: p = potion of heal wounds q:3 no_pickup
KFEAT: ABCDEFGHILMOPQRSTUVXYZ56 = .
FTILE: ABCDEFGHILMOPQRSTUVXYZ56 = tutorial_pad
COLOUR: ABCDEFGHILMOPQRSTUVXYZ56 = lightblue
MARKER: B = lua:tutorial6.msg("identification")
MARKER: C = lua:tutorial6.msg("magic_pointers_3")
MARKER: D = lua:tutorial6.msg("auto_pickup_2")
MARKER: E = lua:tutorial6.msg("enchanted_items")
MARKER: F = lua:tutorial6.msg("examining_items")
MARKER: G = lua:tutorial6.msg("poisoned_weapons")
MARKER: H = lua:tutorial6.msg("waiting")
MARKER: I = lua:tutorial6.msg("tactics")
MARKER: M = lua:tutorial6.msg("artifacts")
MARKER: N = lua:tutorial6.msg("wands")
MARKER: O = lua:tutorial6.msg("intro_to_magic")
MARKER: P = lua:tutorial6.msg("memorisation_1")
MARKER: Q = lua:tutorial6.msg("memorisation_2")
MARKER: R = lua:tutorial6.msg("magic_pointers_1")
MARKER: S = lua:tutorial6.msg("magic_pointers_2")
MARKER: T = lua:tutorial6.msg("casting_spells")
MARKER: U = lua:tutorial6.msg("regaining_mana")
MARKER: V = lua:tutorial6.msg("miscasting_spells")
MARKER: X = lua:tutorial6.msg("staves")
MARKER: Y = lua:tutorial6.msg("spells_and_hunger")
MARKER: Z = lua:tutorial6.msg("jewelry_4")
MARKER: 5 = lua:tutorial6.msg("strategy_1")
MARKER: 6 = lua:tutorial6.msg("resting_reminder")
{{
local melt_ice_marker = TriggerableFunction:new {
    func = "hero_mode_melt_ice"
}

melt_ice_marker:add_triggerer(DgnTriggerer:new {
    type = "player_move"
})

lua_marker("K", melt_ice_marker)
lua_marker("K", portal_desc {pressure_plate = 4})
lua_marker("J", portal_desc {ice_block = 1})
lua_marker("+", portal_desc {door = 1})
}}
MONS: kobold ; chain mail . war axe not_cursed mundane, \
      big kobold ; chain mail . battleaxe not_cursed mundane, \
      centaur hp:10 hd:2
FTILE: 12 = floor_grey_dirt_b
KITEM: L = potion of heal wounds no_pickup q:5 ident:all
FTILE: L = floor_ice
KITEM: M = ratskin_cloak no_pickup
FTILE: M = tutorial_pad
KITEM: N = wand of acid charges:5 ident:all no_pickup
FTILE: N = tutorial_pad
KITEM: P = randbook numspells:2 disc:fire disc2:ice owner:Roxanne \
           title:Treatise_on_Flame spells:flame_tongue&throw_flame
KFEAT: qr789 = furniture
TILE: q = barrel_1
TILE: r = barrel_2
FTILE: q = wall_ice
FTILE: s = cottage_floor
FTILE: r = cottage_floor
KMONS: u = kobold
KMONS: v = big kobold
KMONS: y = kobold
FTILE: uv = cottage_floor
FTILE: y = floor_frozen
RTILE: z = dngn_open_sea
KITEM: X = staff of wizardry not_cursed
KITEM: Z = ring of magical power not_cursed no_pickup
FTILE: + = floor_grey_dirt_b
RTILE: f = dngn_stone_dark
RTILE: ? = wall_stone_black_marked
FTILE: 3 = floor_frozen
FTILE: ! = floor_rough_red
KMONS: 4 = kobold demonologist
FTILE: 4 = cottage_floor
TILE: 7 = table_pizza
TILE: 8 = chair_3
TILE: 9 = chair_4
FTILE: 897 = cottage_floor
KITEM: 0 = ration q:2 tile:food_pizza
FTILE: 0 = cottage_floor


MAP
iiiijiijiijiggggzzzzzzzzzzzzzzz
ikkkkkkkk2kOaPbgwwwwhwwwwwhhwwz
ikiijiijikaabbbgaataaaawwwwwwwz
ikkkN1kkiikaaQbgtaaaataatkkkawz
iMkk12k1kijiigRgbbbVaaaaakXkawz
ikkkkkkkkkkkigSggbggqqgaakkkawz
iiiiiii+iiiiigbbgbssrrgggaa5awz
xaaaaaaGaaawwggCgysuvw3bgff+ffx
xaaawwlwwwwwwwgTgbbswwbbgfs!sfx
xwwwwwlwbwwwwwgbbbUbwwbggfs!sfx
xwnnaaaiiiwwwwgggggggggggfs!sfx
xwnnaaakkiwwwwbaDaaaaxgggfs!sfx
xwLaEaakk+IJlbaatttt6xgggfZ!4fx
xwwaFaaakiwwbaHataB..xfffff+ffx
xwwwwwwwwwwwbKamt....xf0s78Ysfx
xxxxxxxxxxxxxxxxxxx..xfss9ss0fx
ENDMAP

NAME: Graveyard_2
TAGS: graveyard_2 no_item_gen no_trap_gen no_rotate no_hmirror no_vmirror no_pool_fixup
KFEAT: abcdefghijklqsuvyzHIJKLMNOPQVWXYZ = .
KFEAT: mnopyRSTU = x
KFEAT: rBC = furniture
KFEAT: EF = G
KFEAT: A = civilian
FTILE: . = graveyard_grass
FTILE: t = graveyard_grass
RTILE: y = graveyard_gate_wall_bottom
RTILE: R = graveyard_gate_sw
RTILE: S = graveyard_gate_se
RTILE: T = graveyard_gate_nw
RTILE: U = graveyard_gate_ne
FTILE: R = graveyard_gate_open_sw
FTILE: S = graveyard_gate_open_se
FTILE: T = graveyard_gate_open_nw
FTILE: U = graveyard_gate_open_ne
TILE: r = graveyard_gate_wall_top
FTILE: r = cobblestone_path
FTILE: a = cobblestone_path
FTILE: b = spooky_grass_blue
FTILE: c = spooky_grass_edge_east_blue
FTILE: d = spooky_grass_edge_se_blue
FTILE: e = graveyard_grass_edge_nw_blue
FTILE: f = spooky_grass_flowers_blue
FTILE: g = spooky_grass_flowers_2_blue
FTILE: h = cottage_floor
RTILE: m = cottage_wall
RTILE: n = cottage_wall_cracked
RTILE: o = cottage_wall_torch
RTILE: p = cottage_wall_cracked_2
TILE: B = worn_bed_bottom
FTILE: B = cottage_floor
FTILE: i = cottage_floor_worn_bed_top
FTILE: j = cottage_floor_weeds_2_blue
FTILE: k = cottage_floor_cracked
FTILE: l = cottage_floor_cracked_2
TILE: C = cottage_wall_window
FTILE: C = cottage_floor
FTILE: q = spooky_grass_energy_blue
FTILE: s = spooky_grass_energy_2_blue
FTILE: u = spooky_grass_energy_3_blue
FTILE: v = spooky_grass_edge_south_blue
TILE: E = dngn_gravestone
TILE: F = dngn_gravestone_ornate
FTILE: EF = graveyard_grass
FTILE: H = cottage_floor_carpet_middle
FTILE: I = cottage_floor_carpet_s
FTILE: J = cottage_floor_carpet_sw
FTILE: K = cottage_floor_carpet_se
FTILE: L = cottage_floor_carpet_e
FTILE: M = cottage_floor_carpet_w
FTILE: O = cottage_floor_carpet_nw
FTILE: P = cottage_floor_carpet_n
FTILE: Q = cottage_floor_carpet_ne
TILE: A = gravekeeper
FTILE: A = cottage_floor
FTILE: V = spooky_grass_whisps_blue
FTILE: W = spooky_grass_whisps_2_blue
FTILE: X = pressure_plate_active
{{
local open_gate_marker = TriggerableFunction:new {
    func = "hero_mode_open_gate"
}

open_gate_marker:add_triggerer(DgnTriggerer:new {
    type = "player_move"
})

lua_marker("X", open_gate_marker)
lua_marker("X", portal_desc {pressure_plate = 2})
lua_marker("R", portal_desc {gate_part = 1})
lua_marker("S", portal_desc {gate_part = 1})
lua_marker("T", portal_desc {gate_part = 1})
lua_marker("U", portal_desc {gate_part = 1})
}}

MAP
mmmmommmfffbc.EE...EXt
miOPQklmbuVbc....aa..t
mBMHLAhmqbgbc.trrTUrrt
mhJIKhhpfsfbc.tyyRSyyt
mhkhhhjmbWed..tEEaaaEt
mnCm+nCmfbcFE.tEE..aEt
twwwhhhhvvd...tttttatt
ENDMAP